<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="3/24/2020 12:46:14 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="SUPERPANORAMA"
  DTS:CreatorName="SPP\udih"
  DTS:DTSID="{DC2FB853-0DFA-4A84-899C-4F9D3521A193}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.2000.93"
  DTS:LocaleID="1045"
  DTS:ObjectName="SP_STA_Inflation"
  DTS:PackageType="5"
  DTS:VersionBuild="50"
  DTS:VersionGUID="{4FB9E88B-66F9-458E-8391-389260209BAD}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[superpanorama.SuperPharmPoland]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{20FA0BA0-2682-41ED-9089-A6E3B7C4C522}"
      DTS:ObjectName="superpanorama.SuperPharmPoland">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=SUPERDW;Initial Catalog=SuperPharmPoland;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;Application Name=SSIS-Package3-{20FA0BA0-2682-41ED-9089-A6E3B7C4C522}superpanorama.SuperPharmPoland;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{26899B11-4CDA-44CE-9051-E09A65C7DACF}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="currentdate">
      <DTS:VariableValue
        DTS:DataType="7">3/24/2020 1:17:29 PM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{76421920-DDD5-4619-B3C0-5B38D5A03481}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="Inflation">
      <DTS:VariableValue
        DTS:DataType="5">0.</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{C826E853-A92B-4577-8B33-828324095075}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="LastInflationDate">
      <DTS:VariableValue
        DTS:DataType="7">3/24/2020</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{03F6622B-9871-4E98-B877-5472C25EBE6F}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;Select Dateadd(mm,1,&quot;+&quot;'&quot;+(DT_WSTR,25)@[User::LastInflationDate]+&quot;') as LastInflationDate&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="NextMonth">
      <DTS:VariableValue
        DTS:DataType="8">Select Dateadd(mm,1,'24.03.2020') as LastInflationDate</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{1B253DCE-D9C9-4F00-82AE-1E5F8F83E12E}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="NextMonthDate">
      <DTS:VariableValue
        DTS:DataType="7">4/1/2020 1:16:00 PM</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Currentdate Variables"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:Disabled="True"
      DTS:DTSID="{6D24D227-34EB-4DFC-BB38-2E57B43309BD}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Currentdate Variables"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="4">
      <DTS:Variables>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{B62C08B6-2E5A-45E4-88BD-E1AD003ACD09}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="User"
          DTS:ObjectName="currentdate">
          <DTS:VariableValue
            DTS:DataType="7">3/24/2020 1:19:04 PM</DTS:VariableValue>
        </DTS:Variable>
      </DTS:Variables>
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{20FA0BA0-2682-41ED-9089-A6E3B7C4C522}"
          SQLTask:BypassPrepare="False"
          SQLTask:SqlStatementSource="Select GETDATE() AS Currentdate"
          SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ResultBinding
            SQLTask:ResultName="1"
            SQLTask:DtsVariableName="User::currentdate" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Data Flow Task"
      DTS:CreationName="Microsoft.Pipeline"
      DTS:Description="Data Flow Task"
      DTS:Disabled="True"
      DTS:DTSID="{29FA202C-A7D9-4CD6-AFBA-94ED04F40E16}"
      DTS:ExecutableType="Microsoft.Pipeline"
      DTS:LocaleID="-1"
      DTS:ObjectName="Data Flow Task"
      DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server v10; (C) 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
      <DTS:Variables />
      <DTS:ObjectData>
        <pipeline
          BLOBTempStoragePath=""
          bufferTempStoragePath=""
          version="1">
          <components>
            <component
              refId="Package\Data Flow Task\OLE DB Source"
              componentClassID="Microsoft.OLEDBSource"
              contactInfo="OLE DB Source;Microsoft Corporation; Microsoft SqlServer v10; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;7"
              description="OLE DB Source"
              name="OLE DB Source"
              usesDispositions="true"
              version="7">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the database object used to open a rowset."
                  name="OpenRowset"></property>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the name of the database object used to open a rowset."
                  name="OpenRowsetVariable"></property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                <property
                  dataType="System.String"
                  description="The variable that contains the SQL command to be executed."
                  name="SqlCommandVariable">User::NextMonth</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">1250</property>
                <property
                  dataType="System.Boolean"
                  description="Forces the use of the DefaultCodePage property value when describing character data."
                  name="AlwaysUseDefaultCodePage">false</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the mode used to access the database."
                  name="AccessMode"
                  typeConverter="AccessMode">3</property>
                <property
                  dataType="System.String"
                  description="The mappings between the parameters in the SQL command and variables."
                  name="ParameterMapping"></property>
              </properties>
              <connections>
                <connection
                  refId="Package\Data Flow Task\OLE DB Source.Connections[OleDbConnection]"
                  connectionManagerID="Package.ConnectionManagers[superpanorama.SuperPharmPoland]"
                  connectionManagerRefId="Package.ConnectionManagers[superpanorama.SuperPharmPoland]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <outputs>
                <output
                  refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output]"
                  name="OLE DB Source Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[LastInflationDate]"
                      dataType="dbTimeStamp"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[LastInflationDate]"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[LastInflationDate]"
                      name="LastInflationDate"
                      truncationRowDisposition="FailComponent" />
                  </outputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[LastInflationDate]"
                      dataType="dbTimeStamp"
                      name="LastInflationDate" />
                  </externalMetadataColumns>
                </output>
                <output
                  refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output]"
                  isErrorOut="true"
                  name="OLE DB Source Error Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[LastInflationDate]"
                      dataType="dbTimeStamp"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[LastInflationDate]"
                      name="LastInflationDate" />
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Data Flow Task\OLE DB Source 1"
              componentClassID="Microsoft.OLEDBSource"
              contactInfo="OLE DB Source;Microsoft Corporation; Microsoft SqlServer v10; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;7"
              description="OLE DB Source"
              name="OLE DB Source 1"
              usesDispositions="true"
              version="7">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the database object used to open a rowset."
                  name="OpenRowset"></property>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the name of the database object used to open a rowset."
                  name="OpenRowsetVariable"></property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                <property
                  dataType="System.String"
                  description="The variable that contains the SQL command to be executed."
                  name="SqlCommandVariable"></property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">1250</property>
                <property
                  dataType="System.Boolean"
                  description="Forces the use of the DefaultCodePage property value when describing character data."
                  name="AlwaysUseDefaultCodePage">false</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the mode used to access the database."
                  name="AccessMode"
                  typeConverter="AccessMode">0</property>
                <property
                  dataType="System.String"
                  description="The mappings between the parameters in the SQL command and variables."
                  name="ParameterMapping"></property>
              </properties>
              <connections>
                <connection
                  refId="Package\Data Flow Task\OLE DB Source 1.Connections[OleDbConnection]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <outputs>
                <output
                  refId="Package\Data Flow Task\OLE DB Source 1.Outputs[OLE DB Source Output]"
                  name="OLE DB Source Output">
                  <externalMetadataColumns
                    isUsed="True" />
                </output>
                <output
                  refId="Package\Data Flow Task\OLE DB Source 1.Outputs[OLE DB Source Error Output]"
                  isErrorOut="true"
                  name="OLE DB Source Error Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source 1.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\OLE DB Source 1.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source 1.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\OLE DB Source 1.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
          </components>
        </pipeline>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Data Flow Task 1"
      DTS:CreationName="Microsoft.Pipeline"
      DTS:Description="Data Flow Task"
      DTS:DTSID="{3D8C1763-72E6-4BA0-B826-5C1F475888CE}"
      DTS:ExecutableType="Microsoft.Pipeline"
      DTS:LocaleID="-1"
      DTS:ObjectName="Data Flow Task 1"
      DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server v10; (C) 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
      <DTS:Variables />
      <DTS:ObjectData>
        <pipeline
          BLOBTempStoragePath=""
          bufferTempStoragePath=""
          version="1">
          <components>
            <component
              refId="Package\Data Flow Task 1\Add 1 month to lastInflationDate"
              componentClassID="Microsoft.DerivedColumn"
              contactInfo="Derived Column;Microsoft Corporation; Microsoft SqlServer v10; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
              description="Updates column values using expressions"
              name="Add 1 month to lastInflationDate"
              usesDispositions="true">
              <inputs>
                <input
                  refId="Package\Data Flow Task 1\Add 1 month to lastInflationDate.Inputs[Derived Column Input]"
                  description="Input to the Derived Column Transformation"
                  name="Derived Column Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Data Flow Task 1\Add 1 month to lastInflationDate.Inputs[Derived Column Input].Columns[LastInflationDate]"
                      cachedDataType="dbTimeStamp"
                      cachedName="LastInflationDate"
                      lineageId="Package\Data Flow Task 1\Check Last Inflation Record InflationValue and if is before current month then Add it Else Ignore.Outputs[OLE DB Source Output].Columns[LastInflationDate]" />
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Data Flow Task 1\Add 1 month to lastInflationDate.Outputs[Derived Column Output]"
                  description="Default Output of the Derived Column Transformation"
                  exclusionGroup="1"
                  name="Derived Column Output"
                  synchronousInputId="Package\Data Flow Task 1\Add 1 month to lastInflationDate.Inputs[Derived Column Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Data Flow Task 1\Add 1 month to lastInflationDate.Outputs[Derived Column Output].Columns[LastInflationDate_New]"
                      dataType="dbTimeStamp"
                      errorOrTruncationOperation="Computation"
                      errorRowDisposition="FailComponent"
                      lineageId="Package\Data Flow Task 1\Add 1 month to lastInflationDate.Outputs[Derived Column Output].Columns[LastInflationDate_New]"
                      name="LastInflationDate_New"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Derived Column Expression"
                          name="Expression">[DATEADD]("MM",1,#{Package\Data Flow Task 1\Check Last Inflation Record InflationValue and if is before current month then Add it Else Ignore.Outputs[OLE DB Source Output].Columns[LastInflationDate]})</property>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Derived Column Friendly Expression"
                          expressionType="Notify"
                          name="FriendlyExpression">DATEADD("MM",1,LastInflationDate)</property>
                      </properties>
                    </outputColumn>
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Data Flow Task 1\Add 1 month to lastInflationDate.Outputs[Derived Column Error Output]"
                  description="Error Output of the Derived Column Transformation"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="Derived Column Error Output"
                  synchronousInputId="Package\Data Flow Task 1\Add 1 month to lastInflationDate.Inputs[Derived Column Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Data Flow Task 1\Add 1 month to lastInflationDate.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task 1\Add 1 month to lastInflationDate.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Data Flow Task 1\Add 1 month to lastInflationDate.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task 1\Add 1 month to lastInflationDate.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Data Flow Task 1\All Records that where before the Last one-Change the Inflation to Null"
              componentClassID="Microsoft.OLEDBSource"
              contactInfo="OLE DB Source;Microsoft Corporation; Microsoft SqlServer v10; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;7"
              description="OLE DB Source"
              name="All Records that where before the Last one-Change the Inflation to Null"
              usesDispositions="true"
              version="7">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the database object used to open a rowset."
                  name="OpenRowset"></property>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the name of the database object used to open a rowset."
                  name="OpenRowsetVariable"></property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">SELECT dtdate ,CAST(Null AS FLOAT)as NullsForLastInflationValue
from STA_Inflation
where dtdate&lt;=(Select max(dtdate) FROM STA_Inflation where month(dtdate)&lt;Month(Getdate()))</property>
                <property
                  dataType="System.String"
                  description="The variable that contains the SQL command to be executed."
                  name="SqlCommandVariable"></property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">1250</property>
                <property
                  dataType="System.Boolean"
                  description="Forces the use of the DefaultCodePage property value when describing character data."
                  name="AlwaysUseDefaultCodePage">false</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the mode used to access the database."
                  name="AccessMode"
                  typeConverter="AccessMode">2</property>
                <property
                  dataType="System.String"
                  description="The mappings between the parameters in the SQL command and variables."
                  name="ParameterMapping"></property>
              </properties>
              <connections>
                <connection
                  refId="Package\Data Flow Task 1\All Records that where before the Last one-Change the Inflation to Null.Connections[OleDbConnection]"
                  connectionManagerID="Package.ConnectionManagers[superpanorama.SuperPharmPoland]"
                  connectionManagerRefId="Package.ConnectionManagers[superpanorama.SuperPharmPoland]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <outputs>
                <output
                  refId="Package\Data Flow Task 1\All Records that where before the Last one-Change the Inflation to Null.Outputs[OLE DB Source Output]"
                  name="OLE DB Source Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Data Flow Task 1\All Records that where before the Last one-Change the Inflation to Null.Outputs[OLE DB Source Output].Columns[dtdate]"
                      dataType="dbTimeStamp"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Data Flow Task 1\All Records that where before the Last one-Change the Inflation to Null.Outputs[OLE DB Source Output].ExternalColumns[dtdate]"
                      lineageId="Package\Data Flow Task 1\All Records that where before the Last one-Change the Inflation to Null.Outputs[OLE DB Source Output].Columns[dtdate]"
                      name="dtdate"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Data Flow Task 1\All Records that where before the Last one-Change the Inflation to Null.Outputs[OLE DB Source Output].Columns[NullsForLastInflationValue]"
                      dataType="i4"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Data Flow Task 1\All Records that where before the Last one-Change the Inflation to Null.Outputs[OLE DB Source Output].ExternalColumns[NullsForLastInflationValue]"
                      lineageId="Package\Data Flow Task 1\All Records that where before the Last one-Change the Inflation to Null.Outputs[OLE DB Source Output].Columns[NullsForLastInflationValue]"
                      name="NullsForLastInflationValue"
                      truncationRowDisposition="FailComponent" />
                  </outputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Data Flow Task 1\All Records that where before the Last one-Change the Inflation to Null.Outputs[OLE DB Source Output].ExternalColumns[dtdate]"
                      dataType="dbTimeStamp"
                      name="dtdate" />
                    <externalMetadataColumn
                      refId="Package\Data Flow Task 1\All Records that where before the Last one-Change the Inflation to Null.Outputs[OLE DB Source Output].ExternalColumns[NullsForLastInflationValue]"
                      dataType="r8"
                      name="NullsForLastInflationValue" />
                  </externalMetadataColumns>
                </output>
                <output
                  refId="Package\Data Flow Task 1\All Records that where before the Last one-Change the Inflation to Null.Outputs[OLE DB Source Error Output]"
                  isErrorOut="true"
                  name="OLE DB Source Error Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Data Flow Task 1\All Records that where before the Last one-Change the Inflation to Null.Outputs[OLE DB Source Error Output].Columns[dtdate]"
                      dataType="dbTimeStamp"
                      lineageId="Package\Data Flow Task 1\All Records that where before the Last one-Change the Inflation to Null.Outputs[OLE DB Source Error Output].Columns[dtdate]"
                      name="dtdate" />
                    <outputColumn
                      refId="Package\Data Flow Task 1\All Records that where before the Last one-Change the Inflation to Null.Outputs[OLE DB Source Error Output].Columns[NullsForLastInflationValue]"
                      dataType="r8"
                      lineageId="Package\Data Flow Task 1\All Records that where before the Last one-Change the Inflation to Null.Outputs[OLE DB Source Error Output].Columns[NullsForLastInflationValue]"
                      name="NullsForLastInflationValue" />
                    <outputColumn
                      refId="Package\Data Flow Task 1\All Records that where before the Last one-Change the Inflation to Null.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task 1\All Records that where before the Last one-Change the Inflation to Null.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Data Flow Task 1\All Records that where before the Last one-Change the Inflation to Null.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task 1\All Records that where before the Last one-Change the Inflation to Null.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Data Flow Task 1\Check Last Inflation Record InflationValue and if is before current month then Add it Else Ignore"
              componentClassID="Microsoft.OLEDBSource"
              contactInfo="OLE DB Source;Microsoft Corporation; Microsoft SqlServer v10; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;7"
              description="OLE DB Source"
              name="Check Last Inflation Record InflationValue and if is before current month then Add it Else Ignore"
              usesDispositions="true"
              version="7">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the database object used to open a rowset."
                  name="OpenRowset">[dbo].[STA_Inflation]</property>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the name of the database object used to open a rowset."
                  name="OpenRowsetVariable"></property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">SELECT distinct GETDATE() AS CURRENTDATE, 
(SELECT MAX(dtDate) from dbo.STA_Inflation) AS LastInflationDate,
(SELECT
InflationValue From STA_Inflation where dtDate = (SELECT MAX(dtDate) from dbo.STA_Inflation)) AS InflationValue
from  STA_Inflation</property>
                <property
                  dataType="System.String"
                  description="The variable that contains the SQL command to be executed."
                  name="SqlCommandVariable"></property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">1250</property>
                <property
                  dataType="System.Boolean"
                  description="Forces the use of the DefaultCodePage property value when describing character data."
                  name="AlwaysUseDefaultCodePage">false</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the mode used to access the database."
                  name="AccessMode"
                  typeConverter="AccessMode">2</property>
                <property
                  dataType="System.String"
                  description="The mappings between the parameters in the SQL command and variables."
                  name="ParameterMapping"></property>
              </properties>
              <connections>
                <connection
                  refId="Package\Data Flow Task 1\Check Last Inflation Record InflationValue and if is before current month then Add it Else Ignore.Connections[OleDbConnection]"
                  connectionManagerID="Package.ConnectionManagers[superpanorama.SuperPharmPoland]"
                  connectionManagerRefId="Package.ConnectionManagers[superpanorama.SuperPharmPoland]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <outputs>
                <output
                  refId="Package\Data Flow Task 1\Check Last Inflation Record InflationValue and if is before current month then Add it Else Ignore.Outputs[OLE DB Source Output]"
                  name="OLE DB Source Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Data Flow Task 1\Check Last Inflation Record InflationValue and if is before current month then Add it Else Ignore.Outputs[OLE DB Source Output].Columns[LastInflationDate]"
                      dataType="dbTimeStamp"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Data Flow Task 1\Check Last Inflation Record InflationValue and if is before current month then Add it Else Ignore.Outputs[OLE DB Source Output].ExternalColumns[LastInflationDate]"
                      lineageId="Package\Data Flow Task 1\Check Last Inflation Record InflationValue and if is before current month then Add it Else Ignore.Outputs[OLE DB Source Output].Columns[LastInflationDate]"
                      name="LastInflationDate"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Data Flow Task 1\Check Last Inflation Record InflationValue and if is before current month then Add it Else Ignore.Outputs[OLE DB Source Output].Columns[CURRENTDATE]"
                      dataType="dbTimeStamp"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Data Flow Task 1\Check Last Inflation Record InflationValue and if is before current month then Add it Else Ignore.Outputs[OLE DB Source Output].ExternalColumns[CURRENTDATE]"
                      lineageId="Package\Data Flow Task 1\Check Last Inflation Record InflationValue and if is before current month then Add it Else Ignore.Outputs[OLE DB Source Output].Columns[CURRENTDATE]"
                      name="CURRENTDATE"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Data Flow Task 1\Check Last Inflation Record InflationValue and if is before current month then Add it Else Ignore.Outputs[OLE DB Source Output].Columns[InflationValue]"
                      dataType="r8"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Data Flow Task 1\Check Last Inflation Record InflationValue and if is before current month then Add it Else Ignore.Outputs[OLE DB Source Output].ExternalColumns[InflationValue]"
                      lineageId="Package\Data Flow Task 1\Check Last Inflation Record InflationValue and if is before current month then Add it Else Ignore.Outputs[OLE DB Source Output].Columns[InflationValue]"
                      name="InflationValue"
                      truncationRowDisposition="FailComponent" />
                  </outputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Data Flow Task 1\Check Last Inflation Record InflationValue and if is before current month then Add it Else Ignore.Outputs[OLE DB Source Output].ExternalColumns[LastInflationDate]"
                      dataType="dbTimeStamp"
                      name="LastInflationDate" />
                    <externalMetadataColumn
                      refId="Package\Data Flow Task 1\Check Last Inflation Record InflationValue and if is before current month then Add it Else Ignore.Outputs[OLE DB Source Output].ExternalColumns[CURRENTDATE]"
                      dataType="dbTimeStamp"
                      name="CURRENTDATE" />
                    <externalMetadataColumn
                      refId="Package\Data Flow Task 1\Check Last Inflation Record InflationValue and if is before current month then Add it Else Ignore.Outputs[OLE DB Source Output].ExternalColumns[InflationValue]"
                      dataType="r8"
                      name="InflationValue" />
                  </externalMetadataColumns>
                </output>
                <output
                  refId="Package\Data Flow Task 1\Check Last Inflation Record InflationValue and if is before current month then Add it Else Ignore.Outputs[OLE DB Source Error Output]"
                  isErrorOut="true"
                  name="OLE DB Source Error Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Data Flow Task 1\Check Last Inflation Record InflationValue and if is before current month then Add it Else Ignore.Outputs[OLE DB Source Error Output].Columns[CURRENTDATE]"
                      dataType="dbTimeStamp"
                      lineageId="Package\Data Flow Task 1\Check Last Inflation Record InflationValue and if is before current month then Add it Else Ignore.Outputs[OLE DB Source Error Output].Columns[CURRENTDATE]"
                      name="CURRENTDATE" />
                    <outputColumn
                      refId="Package\Data Flow Task 1\Check Last Inflation Record InflationValue and if is before current month then Add it Else Ignore.Outputs[OLE DB Source Error Output].Columns[LastInflationDate]"
                      dataType="dbTimeStamp"
                      lineageId="Package\Data Flow Task 1\Check Last Inflation Record InflationValue and if is before current month then Add it Else Ignore.Outputs[OLE DB Source Error Output].Columns[LastInflationDate]"
                      name="LastInflationDate" />
                    <outputColumn
                      refId="Package\Data Flow Task 1\Check Last Inflation Record InflationValue and if is before current month then Add it Else Ignore.Outputs[OLE DB Source Error Output].Columns[InflationValue]"
                      dataType="r8"
                      lineageId="Package\Data Flow Task 1\Check Last Inflation Record InflationValue and if is before current month then Add it Else Ignore.Outputs[OLE DB Source Error Output].Columns[InflationValue]"
                      name="InflationValue" />
                    <outputColumn
                      refId="Package\Data Flow Task 1\Check Last Inflation Record InflationValue and if is before current month then Add it Else Ignore.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task 1\Check Last Inflation Record InflationValue and if is before current month then Add it Else Ignore.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Data Flow Task 1\Check Last Inflation Record InflationValue and if is before current month then Add it Else Ignore.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task 1\Check Last Inflation Record InflationValue and if is before current month then Add it Else Ignore.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Data Flow Task 1\Conditional Split"
              componentClassID="Microsoft.ConditionalSplit"
              contactInfo="Conditional Split;Microsoft Corporation; Microsoft SqlServer v10; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
              description="Evaluates and directs rows in a dataset."
              name="Conditional Split"
              usesDispositions="true">
              <inputs>
                <input
                  refId="Package\Data Flow Task 1\Conditional Split.Inputs[Conditional Split Input]"
                  description="Input to the Conditional Split Transformation"
                  name="Conditional Split Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Data Flow Task 1\Conditional Split.Inputs[Conditional Split Input].Columns[LastInflationDate]"
                      cachedDataType="dbTimeStamp"
                      cachedName="LastInflationDate"
                      lineageId="Package\Data Flow Task 1\Check Last Inflation Record InflationValue and if is before current month then Add it Else Ignore.Outputs[OLE DB Source Output].Columns[LastInflationDate]" />
                    <inputColumn
                      refId="Package\Data Flow Task 1\Conditional Split.Inputs[Conditional Split Input].Columns[CURRENTDATE]"
                      cachedDataType="dbTimeStamp"
                      cachedName="CURRENTDATE"
                      lineageId="Package\Data Flow Task 1\Check Last Inflation Record InflationValue and if is before current month then Add it Else Ignore.Outputs[OLE DB Source Output].Columns[CURRENTDATE]" />
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Data Flow Task 1\Conditional Split.Outputs[Month of LastInflationdate&lt;&gt; month of currentDate]"
                  description="Output 1 of the Conditional Split Transformation"
                  errorOrTruncationOperation="Computation"
                  errorRowDisposition="FailComponent"
                  exclusionGroup="1"
                  name="Month of LastInflationdate&lt;&gt; month of currentDate"
                  synchronousInputId="Package\Data Flow Task 1\Conditional Split.Inputs[Conditional Split Input]"
                  truncationRowDisposition="FailComponent">
                  <properties>
                    <property
                      containsID="true"
                      dataType="System.String"
                      description="Specifies the expression. This expression version uses lineage identifiers instead of column names."
                      name="Expression">[MONTH](#{Package\Data Flow Task 1\Check Last Inflation Record InflationValue and if is before current month then Add it Else Ignore.Outputs[OLE DB Source Output].Columns[LastInflationDate]}) != [MONTH](#{Package\Data Flow Task 1\Check Last Inflation Record InflationValue and if is before current month then Add it Else Ignore.Outputs[OLE DB Source Output].Columns[CURRENTDATE]})</property>
                    <property
                      containsID="true"
                      dataType="System.String"
                      description="Specifies the friendly version of the expression. This expression version uses column names."
                      expressionType="Notify"
                      name="FriendlyExpression">MONTH(LastInflationDate) != MONTH(CURRENTDATE)</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the position of the condition in the list of conditions that the transformation evaluates. The evaluation order is from the lowest to the highest value."
                      name="EvaluationOrder">0</property>
                  </properties>
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Data Flow Task 1\Conditional Split.Outputs[MONTH(LastInflationDate) Equal to MONTH(CURRENTDATE)]"
                  description="Default Output of the Conditional Split Transformation"
                  exclusionGroup="1"
                  name="MONTH(LastInflationDate) Equal to MONTH(CURRENTDATE)"
                  synchronousInputId="Package\Data Flow Task 1\Conditional Split.Inputs[Conditional Split Input]">
                  <properties>
                    <property
                      dataType="System.Boolean"
                      name="IsDefaultOut">true</property>
                  </properties>
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Data Flow Task 1\Conditional Split.Outputs[Conditional Split Error Output]"
                  description="Error Output of the Conditional Split Transformation"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="Conditional Split Error Output"
                  synchronousInputId="Package\Data Flow Task 1\Conditional Split.Inputs[Conditional Split Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Data Flow Task 1\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task 1\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Data Flow Task 1\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task 1\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Data Flow Task 1\Merge Join"
              componentClassID="Microsoft.MergeJoin"
              contactInfo="Merge Join;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
              description="Combine two sorted data flows into one using the FULL, LEFT, or INNER join. We recommend this transformation when data flows can be sorted at their sources."
              name="Merge Join"
              version="1">
              <properties>
                <property
                  dataType="System.Int32"
                  description="Specifies the type of join to perform."
                  name="JoinType"
                  typeConverter="JoinType">0</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the number of columns in the ordering key."
                  name="NumKeyColumns">1</property>
                <property
                  dataType="System.Boolean"
                  description="Indicates whether the null values are treated as equal values."
                  name="TreatNullsAsEqual">true</property>
                <property
                  dataType="System.Int32"
                  description="Indicates the requested maximum buffers per input before blocking."
                  name="MaxBuffersPerInput">5</property>
              </properties>
              <inputs>
                <input
                  refId="Package\Data Flow Task 1\Merge Join.Inputs[Merge Join Left Input]"
                  hasSideEffects="true"
                  name="Merge Join Left Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Data Flow Task 1\Merge Join.Inputs[Merge Join Left Input].Columns[LastInflationDate]"
                      cachedDataType="dbTimeStamp"
                      cachedName="LastInflationDate"
                      cachedSortKeyPosition="1"
                      lineageId="Package\Data Flow Task 1\Sort 1.Outputs[Sort Output].Columns[LastInflationDate]" />
                    <inputColumn
                      refId="Package\Data Flow Task 1\Merge Join.Inputs[Merge Join Left Input].Columns[CURRENTDATE]"
                      cachedDataType="dbTimeStamp"
                      cachedName="CURRENTDATE"
                      lineageId="Package\Data Flow Task 1\Sort 1.Outputs[Sort Output].Columns[CURRENTDATE]" />
                    <inputColumn
                      refId="Package\Data Flow Task 1\Merge Join.Inputs[Merge Join Left Input].Columns[InflationValue]"
                      cachedDataType="r8"
                      cachedName="InflationValue"
                      lineageId="Package\Data Flow Task 1\Sort 1.Outputs[Sort Output].Columns[InflationValue]" />
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
                <input
                  refId="Package\Data Flow Task 1\Merge Join.Inputs[Merge Join Right Input]"
                  hasSideEffects="true"
                  name="Merge Join Right Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Data Flow Task 1\Merge Join.Inputs[Merge Join Right Input].Columns[dtdate]"
                      cachedDataType="dbTimeStamp"
                      cachedName="dtdate"
                      cachedSortKeyPosition="1"
                      lineageId="Package\Data Flow Task 1\Sort.Outputs[Sort Output].Columns[dtdate]" />
                    <inputColumn
                      refId="Package\Data Flow Task 1\Merge Join.Inputs[Merge Join Right Input].Columns[NullsForLastInflationValue]"
                      cachedDataType="i4"
                      cachedName="NullsForLastInflationValue"
                      lineageId="Package\Data Flow Task 1\Sort.Outputs[Sort Output].Columns[NullsForLastInflationValue]" />
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Data Flow Task 1\Merge Join.Outputs[Merge Join Output]"
                  isSorted="true"
                  name="Merge Join Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Data Flow Task 1\Merge Join.Outputs[Merge Join Output].Columns[LastInflationDate]"
                      dataType="dbTimeStamp"
                      lineageId="Package\Data Flow Task 1\Merge Join.Outputs[Merge Join Output].Columns[LastInflationDate]"
                      name="LastInflationDate"
                      sortKeyPosition="1">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="The input column associated with this output column"
                          name="InputColumnID">#{Package\Data Flow Task 1\Merge Join.Inputs[Merge Join Left Input].Columns[LastInflationDate]}</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Data Flow Task 1\Merge Join.Outputs[Merge Join Output].Columns[CURRENTDATE]"
                      dataType="dbTimeStamp"
                      lineageId="Package\Data Flow Task 1\Merge Join.Outputs[Merge Join Output].Columns[CURRENTDATE]"
                      name="CURRENTDATE">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="The input column associated with this output column"
                          name="InputColumnID">#{Package\Data Flow Task 1\Merge Join.Inputs[Merge Join Left Input].Columns[CURRENTDATE]}</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Data Flow Task 1\Merge Join.Outputs[Merge Join Output].Columns[InflationValue]"
                      dataType="r8"
                      lineageId="Package\Data Flow Task 1\Merge Join.Outputs[Merge Join Output].Columns[InflationValue]"
                      name="InflationValue">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="The input column associated with this output column"
                          name="InputColumnID">#{Package\Data Flow Task 1\Merge Join.Inputs[Merge Join Left Input].Columns[InflationValue]}</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Data Flow Task 1\Merge Join.Outputs[Merge Join Output].Columns[NullsForLastInflationValue]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task 1\Merge Join.Outputs[Merge Join Output].Columns[NullsForLastInflationValue]"
                      name="NullsForLastInflationValue">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="The input column associated with this output column"
                          name="InputColumnID">#{Package\Data Flow Task 1\Merge Join.Inputs[Merge Join Right Input].Columns[NullsForLastInflationValue]}</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Data Flow Task 1\Merge Join.Outputs[Merge Join Output].Columns[dtdate]"
                      dataType="dbTimeStamp"
                      lineageId="Package\Data Flow Task 1\Merge Join.Outputs[Merge Join Output].Columns[dtdate]"
                      name="dtdate">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="The input column associated with this output column"
                          name="InputColumnID">#{Package\Data Flow Task 1\Merge Join.Inputs[Merge Join Right Input].Columns[dtdate]}</property>
                      </properties>
                    </outputColumn>
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Data Flow Task 1\Multicast"
              componentClassID="Microsoft.Multicast"
              contactInfo="Multicast;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
              description="Distributes every input row to every row in one or more outputs. For example, branch your data flow to make a copy of data so that some values can be masked before sharing with external partners."
              name="Multicast">
              <inputs>
                <input
                  refId="Package\Data Flow Task 1\Multicast.Inputs[Multicast Input 1]"
                  name="Multicast Input 1">
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Data Flow Task 1\Multicast.Outputs[Multicast Output 1]"
                  dangling="true"
                  deleteOutputOnPathDetached="true"
                  name="Multicast Output 1"
                  synchronousInputId="Package\Data Flow Task 1\Multicast.Inputs[Multicast Input 1]">
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Data Flow Task 1\Multicast 1"
              componentClassID="Microsoft.Multicast"
              contactInfo="Multicast;Microsoft Corporation; Microsoft SqlServer v10; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
              description="Creates copies of a dataset."
              name="Multicast 1">
              <inputs>
                <input
                  refId="Package\Data Flow Task 1\Multicast 1.Inputs[Multicast Input 1]"
                  name="Multicast Input 1">
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Data Flow Task 1\Multicast 1.Outputs[Multicast Output 1]"
                  dangling="true"
                  deleteOutputOnPathDetached="true"
                  name="Multicast Output 1"
                  synchronousInputId="Package\Data Flow Task 1\Multicast 1.Inputs[Multicast Input 1]">
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Data Flow Task 1\Sort"
              componentClassID="Microsoft.Sort"
              contactInfo="Sort;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
              description="Sorts input data in ascending or descending order when it cannot be sorted at its source. For example, sort sales data by 'customer id' before it is written to a flat file and delivered to another department. Note: We do not recommend this transformation for large data flows."
              name="Sort"
              version="1">
              <properties>
                <property
                  dataType="System.Boolean"
                  description="Indicates whether the Sort transformation removes rows with duplicate sort values."
                  name="EliminateDuplicates">false</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the maximum number of threads to use for sorting."
                  expressionType="Notify"
                  name="MaximumThreads">-1</property>
              </properties>
              <inputs>
                <input
                  refId="Package\Data Flow Task 1\Sort.Inputs[Sort Input]"
                  name="Sort Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Data Flow Task 1\Sort.Inputs[Sort Input].Columns[dtdate]"
                      cachedDataType="dbTimeStamp"
                      cachedName="dtdate"
                      lineageId="Package\Data Flow Task 1\All Records that where before the Last one-Change the Inflation to Null.Outputs[OLE DB Source Output].Columns[dtdate]">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Specifies the comparison options for character data."
                          name="NewComparisonFlags">0</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the sort order of the column."
                          name="NewSortKeyPosition">1</property>
                      </properties>
                    </inputColumn>
                    <inputColumn
                      refId="Package\Data Flow Task 1\Sort.Inputs[Sort Input].Columns[NullsForLastInflationValue]"
                      cachedDataType="i4"
                      cachedName="NullsForLastInflationValue"
                      lineageId="Package\Data Flow Task 1\All Records that where before the Last one-Change the Inflation to Null.Outputs[OLE DB Source Output].Columns[NullsForLastInflationValue]">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Specifies the comparison options for character data."
                          name="NewComparisonFlags">0</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the sort order of the column."
                          name="NewSortKeyPosition">0</property>
                      </properties>
                    </inputColumn>
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Data Flow Task 1\Sort.Outputs[Sort Output]"
                  isSorted="true"
                  name="Sort Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Data Flow Task 1\Sort.Outputs[Sort Output].Columns[dtdate]"
                      dataType="dbTimeStamp"
                      lineageId="Package\Data Flow Task 1\Sort.Outputs[Sort Output].Columns[dtdate]"
                      name="dtdate"
                      sortKeyPosition="1">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Specifies the lineage identifier of the input column that is associated with this output column."
                          name="SortColumnId">#{Package\Data Flow Task 1\All Records that where before the Last one-Change the Inflation to Null.Outputs[OLE DB Source Output].Columns[dtdate]}</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Data Flow Task 1\Sort.Outputs[Sort Output].Columns[NullsForLastInflationValue]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task 1\Sort.Outputs[Sort Output].Columns[NullsForLastInflationValue]"
                      name="NullsForLastInflationValue">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Specifies the lineage identifier of the input column that is associated with this output column."
                          name="SortColumnId">#{Package\Data Flow Task 1\All Records that where before the Last one-Change the Inflation to Null.Outputs[OLE DB Source Output].Columns[NullsForLastInflationValue]}</property>
                      </properties>
                    </outputColumn>
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Data Flow Task 1\Sort 1"
              componentClassID="Microsoft.Sort"
              contactInfo="Sort;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
              description="Sorts input data in ascending or descending order when it cannot be sorted at its source. For example, sort sales data by 'customer id' before it is written to a flat file and delivered to another department. Note: We do not recommend this transformation for large data flows."
              name="Sort 1"
              version="1">
              <properties>
                <property
                  dataType="System.Boolean"
                  description="Indicates whether the Sort transformation removes rows with duplicate sort values."
                  name="EliminateDuplicates">false</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the maximum number of threads to use for sorting."
                  expressionType="Notify"
                  name="MaximumThreads">-1</property>
              </properties>
              <inputs>
                <input
                  refId="Package\Data Flow Task 1\Sort 1.Inputs[Sort Input]"
                  name="Sort Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Data Flow Task 1\Sort 1.Inputs[Sort Input].Columns[LastInflationDate]"
                      cachedDataType="dbTimeStamp"
                      cachedName="LastInflationDate"
                      lineageId="Package\Data Flow Task 1\Union All.Outputs[Union All Output 1].Columns[LastInflationDate]">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Specifies the comparison options for character data."
                          name="NewComparisonFlags">0</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the sort order of the column."
                          name="NewSortKeyPosition">1</property>
                      </properties>
                    </inputColumn>
                    <inputColumn
                      refId="Package\Data Flow Task 1\Sort 1.Inputs[Sort Input].Columns[CURRENTDATE]"
                      cachedDataType="dbTimeStamp"
                      cachedName="CURRENTDATE"
                      lineageId="Package\Data Flow Task 1\Union All.Outputs[Union All Output 1].Columns[CURRENTDATE]">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Specifies the comparison options for character data."
                          name="NewComparisonFlags">0</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the sort order of the column."
                          name="NewSortKeyPosition">0</property>
                      </properties>
                    </inputColumn>
                    <inputColumn
                      refId="Package\Data Flow Task 1\Sort 1.Inputs[Sort Input].Columns[InflationValue]"
                      cachedDataType="r8"
                      cachedName="InflationValue"
                      lineageId="Package\Data Flow Task 1\Union All.Outputs[Union All Output 1].Columns[InflationValue]">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Specifies the comparison options for character data."
                          name="NewComparisonFlags">0</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the sort order of the column."
                          name="NewSortKeyPosition">0</property>
                      </properties>
                    </inputColumn>
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Data Flow Task 1\Sort 1.Outputs[Sort Output]"
                  isSorted="true"
                  name="Sort Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Data Flow Task 1\Sort 1.Outputs[Sort Output].Columns[LastInflationDate]"
                      dataType="dbTimeStamp"
                      lineageId="Package\Data Flow Task 1\Sort 1.Outputs[Sort Output].Columns[LastInflationDate]"
                      name="LastInflationDate"
                      sortKeyPosition="1">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Specifies the lineage identifier of the input column that is associated with this output column."
                          name="SortColumnId">#{Package\Data Flow Task 1\Union All.Outputs[Union All Output 1].Columns[LastInflationDate]}</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Data Flow Task 1\Sort 1.Outputs[Sort Output].Columns[CURRENTDATE]"
                      dataType="dbTimeStamp"
                      lineageId="Package\Data Flow Task 1\Sort 1.Outputs[Sort Output].Columns[CURRENTDATE]"
                      name="CURRENTDATE">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Specifies the lineage identifier of the input column that is associated with this output column."
                          name="SortColumnId">#{Package\Data Flow Task 1\Union All.Outputs[Union All Output 1].Columns[CURRENTDATE]}</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Data Flow Task 1\Sort 1.Outputs[Sort Output].Columns[InflationValue]"
                      dataType="r8"
                      lineageId="Package\Data Flow Task 1\Sort 1.Outputs[Sort Output].Columns[InflationValue]"
                      name="InflationValue">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Specifies the lineage identifier of the input column that is associated with this output column."
                          name="SortColumnId">#{Package\Data Flow Task 1\Union All.Outputs[Union All Output 1].Columns[InflationValue]}</property>
                      </properties>
                    </outputColumn>
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Data Flow Task 1\Union All"
              componentClassID="Microsoft.UnionAll"
              contactInfo="Union All;Microsoft Corporation; Microsoft SqlServer v10; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
              description="Merges multiple datasets."
              name="Union All"
              version="1">
              <inputs>
                <input
                  refId="Package\Data Flow Task 1\Union All.Inputs[Union All Input 1]"
                  name="Union All Input 1">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Data Flow Task 1\Union All.Inputs[Union All Input 1].Columns[LastInflationDate]"
                      cachedDataType="dbTimeStamp"
                      cachedName="LastInflationDate"
                      lineageId="Package\Data Flow Task 1\Check Last Inflation Record InflationValue and if is before current month then Add it Else Ignore.Outputs[OLE DB Source Output].Columns[LastInflationDate]">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Output column lineage ID"
                          name="OutputColumnLineageID">#{Package\Data Flow Task 1\Union All.Outputs[Union All Output 1].Columns[LastInflationDate]}</property>
                      </properties>
                    </inputColumn>
                    <inputColumn
                      refId="Package\Data Flow Task 1\Union All.Inputs[Union All Input 1].Columns[CURRENTDATE]"
                      cachedDataType="dbTimeStamp"
                      cachedName="CURRENTDATE"
                      lineageId="Package\Data Flow Task 1\Check Last Inflation Record InflationValue and if is before current month then Add it Else Ignore.Outputs[OLE DB Source Output].Columns[CURRENTDATE]">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Output column lineage ID"
                          name="OutputColumnLineageID">#{Package\Data Flow Task 1\Union All.Outputs[Union All Output 1].Columns[CURRENTDATE]}</property>
                      </properties>
                    </inputColumn>
                    <inputColumn
                      refId="Package\Data Flow Task 1\Union All.Inputs[Union All Input 1].Columns[InflationValue]"
                      cachedDataType="r8"
                      cachedName="InflationValue"
                      lineageId="Package\Data Flow Task 1\Check Last Inflation Record InflationValue and if is before current month then Add it Else Ignore.Outputs[OLE DB Source Output].Columns[InflationValue]">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Output column lineage ID"
                          name="OutputColumnLineageID">#{Package\Data Flow Task 1\Union All.Outputs[Union All Output 1].Columns[InflationValue]}</property>
                      </properties>
                    </inputColumn>
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
                <input
                  refId="Package\Data Flow Task 1\Union All.Inputs[Union All Input 2]"
                  hasSideEffects="true"
                  name="Union All Input 2">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Data Flow Task 1\Union All.Inputs[Union All Input 2].Columns[CURRENTDATE]"
                      cachedDataType="dbTimeStamp"
                      cachedName="CURRENTDATE"
                      lineageId="Package\Data Flow Task 1\Check Last Inflation Record InflationValue and if is before current month then Add it Else Ignore.Outputs[OLE DB Source Output].Columns[CURRENTDATE]">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Output column lineage ID"
                          name="OutputColumnLineageID">#{Package\Data Flow Task 1\Union All.Outputs[Union All Output 1].Columns[CURRENTDATE]}</property>
                      </properties>
                    </inputColumn>
                    <inputColumn
                      refId="Package\Data Flow Task 1\Union All.Inputs[Union All Input 2].Columns[InflationValue]"
                      cachedDataType="r8"
                      cachedName="InflationValue"
                      lineageId="Package\Data Flow Task 1\Check Last Inflation Record InflationValue and if is before current month then Add it Else Ignore.Outputs[OLE DB Source Output].Columns[InflationValue]">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Output column lineage ID"
                          name="OutputColumnLineageID">#{Package\Data Flow Task 1\Union All.Outputs[Union All Output 1].Columns[InflationValue]}</property>
                      </properties>
                    </inputColumn>
                    <inputColumn
                      refId="Package\Data Flow Task 1\Union All.Inputs[Union All Input 2].Columns[LastInflationDate_New]"
                      cachedDataType="dbTimeStamp"
                      cachedName="LastInflationDate_New"
                      lineageId="Package\Data Flow Task 1\Add 1 month to lastInflationDate.Outputs[Derived Column Output].Columns[LastInflationDate_New]">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Output column lineage ID"
                          name="OutputColumnLineageID">#{Package\Data Flow Task 1\Union All.Outputs[Union All Output 1].Columns[LastInflationDate]}</property>
                      </properties>
                    </inputColumn>
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
                <input
                  refId="Package\Data Flow Task 1\Union All.Inputs[Union All Input 3]"
                  dangling="true"
                  hasSideEffects="true"
                  name="Union All Input 3">
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Data Flow Task 1\Union All.Outputs[Union All Output 1]"
                  name="Union All Output 1">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Data Flow Task 1\Union All.Outputs[Union All Output 1].Columns[LastInflationDate]"
                      dataType="dbTimeStamp"
                      lineageId="Package\Data Flow Task 1\Union All.Outputs[Union All Output 1].Columns[LastInflationDate]"
                      name="LastInflationDate" />
                    <outputColumn
                      refId="Package\Data Flow Task 1\Union All.Outputs[Union All Output 1].Columns[CURRENTDATE]"
                      dataType="dbTimeStamp"
                      lineageId="Package\Data Flow Task 1\Union All.Outputs[Union All Output 1].Columns[CURRENTDATE]"
                      name="CURRENTDATE" />
                    <outputColumn
                      refId="Package\Data Flow Task 1\Union All.Outputs[Union All Output 1].Columns[InflationValue]"
                      dataType="r8"
                      lineageId="Package\Data Flow Task 1\Union All.Outputs[Union All Output 1].Columns[InflationValue]"
                      name="InflationValue" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
          </components>
          <paths>
            <path
              refId="Package\Data Flow Task 1.Paths[Derived Column Output]"
              endId="Package\Data Flow Task 1\Union All.Inputs[Union All Input 2]"
              name="Derived Column Output"
              startId="Package\Data Flow Task 1\Add 1 month to lastInflationDate.Outputs[Derived Column Output]" />
            <path
              refId="Package\Data Flow Task 1.Paths[Merge Join Output]"
              endId="Package\Data Flow Task 1\Multicast.Inputs[Multicast Input 1]"
              name="Merge Join Output"
              startId="Package\Data Flow Task 1\Merge Join.Outputs[Merge Join Output]" />
            <path
              refId="Package\Data Flow Task 1.Paths[Month of LastInflationdate&lt;&gt; month of currentDate]"
              endId="Package\Data Flow Task 1\Add 1 month to lastInflationDate.Inputs[Derived Column Input]"
              name="Month of LastInflationdate&lt;&gt; month of currentDate"
              startId="Package\Data Flow Task 1\Conditional Split.Outputs[Month of LastInflationdate&lt;&gt; month of currentDate]" />
            <path
              refId="Package\Data Flow Task 1.Paths[MONTH(LastInflationDate) Equal to MONTH(CURRENTDATE)]"
              endId="Package\Data Flow Task 1\Union All.Inputs[Union All Input 1]"
              name="MONTH(LastInflationDate) Equal to MONTH(CURRENTDATE)"
              startId="Package\Data Flow Task 1\Conditional Split.Outputs[MONTH(LastInflationDate) Equal to MONTH(CURRENTDATE)]" />
            <path
              refId="Package\Data Flow Task 1.Paths[OLE DB Source Output]"
              endId="Package\Data Flow Task 1\Conditional Split.Inputs[Conditional Split Input]"
              name="OLE DB Source Output"
              startId="Package\Data Flow Task 1\Check Last Inflation Record InflationValue and if is before current month then Add it Else Ignore.Outputs[OLE DB Source Output]" />
            <path
              refId="Package\Data Flow Task 1.Paths[OLE DB Source Output1]"
              endId="Package\Data Flow Task 1\Sort.Inputs[Sort Input]"
              name="OLE DB Source Output"
              startId="Package\Data Flow Task 1\All Records that where before the Last one-Change the Inflation to Null.Outputs[OLE DB Source Output]" />
            <path
              refId="Package\Data Flow Task 1.Paths[Sort Output]"
              endId="Package\Data Flow Task 1\Merge Join.Inputs[Merge Join Left Input]"
              name="Sort Output"
              startId="Package\Data Flow Task 1\Sort 1.Outputs[Sort Output]" />
            <path
              refId="Package\Data Flow Task 1.Paths[Sort Output1]"
              endId="Package\Data Flow Task 1\Merge Join.Inputs[Merge Join Right Input]"
              name="Sort Output"
              startId="Package\Data Flow Task 1\Sort.Outputs[Sort Output]" />
            <path
              refId="Package\Data Flow Task 1.Paths[Union All Output 1]"
              endId="Package\Data Flow Task 1\Sort 1.Inputs[Sort Input]"
              name="Union All Output 1"
              startId="Package\Data Flow Task 1\Union All.Outputs[Union All Output 1]" />
          </paths>
        </pipeline>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Execute SQL Task"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:Disabled="True"
      DTS:DTSID="{52673C5D-19D9-4B37-989B-667D917FD08E}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Execute SQL Task"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="6">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{20FA0BA0-2682-41ED-9089-A6E3B7C4C522}"
          SQLTask:SqlStmtSourceType="Variable"
          SQLTask:SqlStatementSource="User::NextMonth" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="User::NextMonthDate"
            SQLTask:ParameterDirection="Output"
            SQLTask:DataType="135"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\For Loop Container"
      DTS:AssignExpression="@Counter=@NextMonthDate"
      DTS:CreationName="STOCK:FORLOOP"
      DTS:Description="For Loop Container"
      DTS:Disabled="True"
      DTS:DTSID="{460A9B8B-E90C-4441-A37F-EB9A99AAFBB4}"
      DTS:EvalExpression="month(@Counter)&lt;month(@currentdate)"
      DTS:ExecutableType="STOCK:FORLOOP"
      DTS:InitExpression="@Counter=@LastInflationDate"
      DTS:LocaleID="-1"
      DTS:MaxConcurrent="1"
      DTS:ObjectName="For Loop Container">
      <DTS:Variables>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{49BE8E15-6343-4D6E-9631-14B0091BB911}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="User"
          DTS:ObjectName="Counter">
          <DTS:VariableValue
            DTS:DataType="7">9/25/2019 7:52:00 AM</DTS:VariableValue>
        </DTS:Variable>
      </DTS:Variables>
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\For Loop Container\Execute SQL Task"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{02A710CA-3A36-454B-B204-F1512911B730}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Execute SQL Task"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="1">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{20FA0BA0-2682-41ED-9089-A6E3B7C4C522}"
              SQLTask:SqlStmtSourceType="Variable"
              SQLTask:SqlStatementSource="User::NextMonth"
              SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ResultBinding
                SQLTask:ResultName="0"
                SQLTask:DtsVariableName="User::NextMonthDate" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\InflationValue Variables"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:Disabled="True"
      DTS:DTSID="{CCFD958B-39B8-46D7-9D01-F36AC7A6B258}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="InflationValue Variables"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="5">
      <DTS:Variables>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{C0A8989B-1DA7-431B-815F-6170477C2E3F}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="User"
          DTS:ObjectName="currentdate">
          <DTS:VariableValue
            DTS:DataType="7">3/24/2020 1:19:04 PM</DTS:VariableValue>
        </DTS:Variable>
      </DTS:Variables>
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{20FA0BA0-2682-41ED-9089-A6E3B7C4C522}"
          SQLTask:BypassPrepare="False"
          SQLTask:SqlStatementSource="Select &#xA;InflationValue From STA_Inflation where dtDate=(select MAX(dtDate) as Inflation  from dbo.STA_Inflation)&#xA;GROUP BY  InflationValue "
          SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ResultBinding
            SQLTask:ResultName="2"
            SQLTask:DtsVariableName="User::Inflation" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\LastInflationDate Variables"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:Disabled="True"
      DTS:DTSID="{4A764918-5C65-4591-ADAD-BF58DEF9862F}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="LastInflationDate Variables"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{DAE86217-05F4-4CE0-B517-BA00E7937864}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="User"
          DTS:ObjectName="currentdate">
          <DTS:VariableValue
            DTS:DataType="7">3/24/2020 1:19:04 PM</DTS:VariableValue>
        </DTS:Variable>
      </DTS:Variables>
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{20FA0BA0-2682-41ED-9089-A6E3B7C4C522}"
          SQLTask:BypassPrepare="False"
          SQLTask:SqlStatementSource="Select MAX(dtDate) as LastInflationDate"
          SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ResultBinding
            SQLTask:ResultName="0"
            SQLTask:DtsVariableName="User::LastInflationDate" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Script Task 1"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:Disabled="True"
      DTS:DTSID="{E9E6E108-31EF-47A5-BA3B-EF12007C0F86}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Script Task 1"
      DTS:ThreadHint="1">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_dd697bd01eb8491ba5c17da52a6d00a1"
          VSTAMajorVersion="15"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::currentdate,User::Inflation,User::LastInflationDate,User::NextMonth"
          ReadWriteVariables="User::NextMonthDate">
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="st_dd697bd01eb8491ba5c17da52a6d00a1.csproj"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="utf-16"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This section defines project-level properties.

       Configuration - Specifies whether the default configuration is Release or Debug.
       Platform - Specifies what CPU the output of this project can run on.
       OutputType - Must be "Library" for VSTA.
       NoStandardLibraries - Set to "false" for VSTA.
       RootNamespace - In C#, this specifies the namespace given to new files.
                       In Visual Basic, all objects are wrapped in this namespace at runtime.
       AssemblyName - Name of the output assembly.
  -->
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <OutputType>Library</OutputType>
    <NoStandardLibraries>false</NoStandardLibraries>
    <RootNamespace>ST_57ce5ea81acd4829829fd20ac88d19dd.csproj</RootNamespace>
    <AssemblyName>st_dd697bd01eb8491ba5c17da52a6d00a1</AssemblyName>
    <ProjectGuid>{10D51804-D994-4D57-8AA6-A40D93732E36}</ProjectGuid>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Debug" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Release" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section enables pre- and post-build steps. However,
       it is recommended that MSBuild tasks be used instead of these properties.
  -->
  <PropertyGroup>
    <PreBuildEvent></PreBuildEvent>
    <PostBuildEvent></PostBuildEvent>
  </PropertyGroup>
  <!-- This sections specifies references for the project. -->
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=15.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=15.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <!-- This section defines the user source files that are part of the
       project.

       Compile - Specifies a source file to compile.
       EmbeddedResource - Specifies a .resx file for embedded resources.
       None - Specifies a file that is not to be passed to the compiler (for instance,
              a text file or XML file).
       AppDesigner - Specifies the directory where the application properties files can
                     be found.
  -->
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
    <!-- Include the default configuration information and metadata files for the add-in.
         These files are copied to the build output directory when the project is
         built, and the path to the configuration file is passed to add-in on the command
         line when debugging.
    -->
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="" />
        <Host Name="SSIS_ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST150</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[/*
   Microsoft SQL Server Integration Services Script Task
   Write scripts using Microsoft Visual C# 2008.
   The ScriptMain is the entry point class of the script.
*/

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;

namespace ST_57ce5ea81acd4829829fd20ac88d19dd.csproj
{
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {

        #region VSTA generated code
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        /*
		The execution engine calls this method when the task executes.
		To access the object model, use the Dts property. Connections, variables, events,
		and logging features are available as members of the Dts property as shown in the following examples.

		To reference a variable, call Dts.Variables["MyCaseSensitiveVariableName"].Value;
		To post a log entry, call Dts.Log("This is my log text", 999, null);
		To fire an event, call Dts.Events.FireInformation(99, "test", "hit the help message", "", 0, true);

		To use the connections collection use something like the following:
		ConnectionManager cm = Dts.Connections.Add("OLEDB");
		cm.ConnectionString = "Data Source=localhost;Initial Catalog=AdventureWorks;Provider=SQLNCLI10;Integrated Security=SSPI;Auto Translate=False;";

		Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
		
		To open Help, press F1.
	*/

        public void Main()
        {
            // TODO: Add your code here
             string strMessage = Dts.Variables["User::currentdate"].Value.ToString();
            MessageBox.Show("currentdate:"+strMessage);
            strMessage = Dts.Variables["User::LastInflationDate"].Value.ToString();
            MessageBox.Show("LastInflationDate" + strMessage);
            strMessage = Dts.Variables["User::Inflation"].Value.ToString();
            MessageBox.Show("Inflation"+strMessage);
            strMessage = Dts.Variables["User::NextMonthDate"].Value.ToString();
            MessageBox.Show("User::NextMonthDate" + strMessage);
            Dts.TaskResult = (int)ScriptResults.Success;
        }
    }
}


  ]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>st_dd697bd01eb8491ba5c17da52a6d00a1</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>st_dd697bd01eb8491ba5c17da52a6d00a1</msb:DisplayName>
    <msb:ProjectId>{4ED9F4F5-E635-4D38-B629-830E5C5F0AC7}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="st_dd697bd01eb8491ba5c17da52a6d00a1.csproj" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_57ce5ea81acd4829829fd20ac88d19dd.csproj.Properties.Settings.get_Default():ST_57ce5ea81acd4829829fd20ac88d19dd.csproj.Properties.Sett" +
    "ings")]

namespace ST_57ce5ea81acd4829829fd20ac88d19dd.csproj.Properties
{


    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_57ce5ea81acd4829829fd20ac88d19dd.csproj")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_57ce5ea81acd4829829fd20ac88d19dd.csproj")]
[assembly: AssemblyCopyright("Copyright @  2019")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_57ce5ea81acd4829829fd20ac88d19dd.csproj.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_57ce5ea81acd4829829fd20ac88d19dd.csproj.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_57ce5ea81acd4829829fd20ac88d19dd.csproj.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_57ce5ea81acd4829829fd20ac88d19dd.csproj.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_57ce5ea81acd4829829fd20ac88d19dd.csproj.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="st_dd697bd01eb8491ba5c17da52a6d00a1.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAGYys14AAAAAAAAAAOAAIiALATAAABAAAAAIAAAAAAAAwi8A
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAHAvAABPAAAAAEAAAJgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAyA8AAAAgAAAAEAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAJgEAAAAQAAAAAYAAAASAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAGAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAACk
LwAAAAAAAEgAAAACAAUAlCEAACQNAAABAAAAAAAAALguAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABMwAgDRAAAAAQAAEQIoEAAACm8RAAAKcgEAAHBvEgAACm8T
AAAKbxQAAAoKciUAAHAGKBUAAAooFgAACiYCKBAAAApvEQAACnI/AABwbxIAAApvEwAACm8UAAAK
CnJvAABwBigVAAAKKBYAAAomAigQAAAKbxEAAApykwAAcG8SAAAKbxMAAApvFAAACgpyswAAcAYo
FQAACigWAAAKJgIoEAAACm8RAAAKcscAAHBvEgAACm8TAAAKbxQAAAoKcscAAHAGKBUAAAooFgAA
CiYCKBAAAAoWbxcAAAoqHgIoGAAACioeAigZAAAKKq5+AQAABC0ecu8AAHDQAwAAAigaAAAKbxsA
AApzHAAACoABAAAEfgEAAAQqGn4CAAAEKh4CgAIAAAQqGn4DAAAEKh4CKB0AAAoqLnMIAAAGgAMA
AAQqAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAAAPADAAAjfgAAXAQAANAFAAAj
U3RyaW5ncwAAAAAsCgAAcAEAACNVUwCcCwAAEAAAACNHVUlEAAAArAsAAHgBAAAjQmxvYgAAAAAA
AAACAAABVx2iAQkDAAAA+gEzABYAAAEAAAAgAAAABQAAAAYAAAAJAAAAAQAAAB0AAAACAAAAEAAA
AAEAAAACAAAAAwAAAAQAAAABAAAABQAAAAEAAAABAAAAAACgAwEAAAAAAAYAJQJwBAYAtAJwBAYA
cQFdBA8A6wQAAAYAngEeBAYACAIeBAYA6QEeBAYAmwIeBAYARQIeBAYAXgIeBAYAtQEeBAYA0AHi
AgoAeQJPAwoA8ABPAwYA2APRAwYAVAFdBAYAgQXRAwYAQASQBAYAMAQJBA4AJAGKAw4AhQGKAw4A
DAH0AwYAOQFwBAoAeANPAxIANAWbABIAbgCbAAYA/gLRAxYAtQVHBRYAlAVHBQYAuwDRAwYAdwDR
AwYAxAUeBAAAAAAlAAAAAAABAAEAAQAQAOkDBQM5AAEAAQAAABAAlwT6BEUAAQADAAABEAA+BfoE
WQADAAcAAwEAAGwFAAA9AAQACgARAN0DdAARAOAAeAARAF4AfAAGBk0AgABWgFwFgwBWgMAAgwBQ
IAAAAACGAO8DBgABAC0hAAAAAIYYUAQGAAEANSEAAAAAgxhQBAYAAQA9IQAAAACTCDwEhwABAGkh
AAAAAJMIyACMAAEAcCEAAAAAkwjUAJEAAQB4IQAAAACWCIgFlwACAH8hAAAAAIYYUAQGAAIAhyEA
AAAAkRhWBJwAAgAAAAEA3AIJAFAEAQARAFAEBgAZAFAECgApAFAEEAAxAFAEEAA5AFAEEABBAFAE
EABJAFAEEABRAFAEEABZAFAEEABhAFAEEABpAFAEBgCBAFAEBgCpAFAEFQC5AFAEBgBxAGQFHwDB
ADAFJADJAMgDKQDRANICLwCJAPwCMwDZAHoFNwDhALAFPQDBAKEFAQBxAFAEBgCJAFAEBgDxAIkA
QwDxAMAFSgCRAFAEUACxAFAEBgAIABQAagAIABgAbwApAHMA1wAuAAsArwAuABMAuAAuABsA1wAu
ACMA4AAuACsAEAEuADMAEAEuADsAEAEuAEMA4AAuAEsAFgEuAFMAEAEuAFsALQFDAGMAbwBJAHMA
1wBhAHsAbwBjAGsAbwAbAAMAAQAEAAMAAABABKAAAADoAKUAAACMBaoAAgAEAAMAAgAFAAUAAQAG
AAUAAgAHAAcABIAAAAEAAAAHHUOoAAAAAAAAAQAAAAQAAAAAAAAAAAAAAFgAVQAAAAAADwAAAAAA
AAAAAAAAYQAwAwAAAAAEAAAAAAAAAAAAAABYANEDAAAAAA8AAAAAAAAAAAAAAGEALgAAAAAABAAA
AAAAAAAAAAAAWABHBQAAAAAAAAAAAQAAAKEEAAAFAAIAAAAAAABzdF9kZDY5N2JkMDFlYjg0OTFi
YTVjMTdkYTUyYTZkMDBhMQA8TW9kdWxlPgBNaWNyb3NvZnQuU3FsU2VydmVyLk1hbmFnZWREVFMA
dmFsdWVfXwBtc2NvcmxpYgBkZWZhdWx0SW5zdGFuY2UAVmFyaWFibGUAUnVudGltZVR5cGVIYW5k
bGUAR2V0VHlwZUZyb21IYW5kbGUATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZQBUeXBl
AEZhaWx1cmUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAcmVzb3VyY2VDdWx0dXJlAFZTVEFSVFNj
cmlwdE9iamVjdE1vZGVsQmFzZQBBcHBsaWNhdGlvblNldHRpbmdzQmFzZQBFZGl0b3JCcm93c2Fi
bGVTdGF0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0
cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEFzc2Vt
Ymx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJhbWV3
b3JrQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURlc2Ny
aXB0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQ
cm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3JpcHRUYXNr
RW50cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGltZUNvbXBh
dGliaWxpdHlBdHRyaWJ1dGUAZ2V0X1ZhbHVlAHZhbHVlAFN5c3RlbS5SdW50aW1lLlZlcnNpb25p
bmcAVG9TdHJpbmcAU1RfNTdjZTVlYTgxYWNkNDgyOTgyOWZkMjBhYzg4ZDE5ZGQuY3Nwcm9qAE1p
Y3Jvc29mdC5TcWxTZXJ2ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNr
cy5TY3JpcHRUYXNrAFNjcmlwdE9iamVjdE1vZGVsAFN5c3RlbS5Db21wb25lbnRNb2RlbABzdF9k
ZDY5N2JkMDFlYjg0OTFiYTVjMTdkYTUyYTZkMDBhMS5kbGwAZ2V0X0l0ZW0AU3lzdGVtAEVudW0A
cmVzb3VyY2VNYW4AU2NyaXB0TWFpbgBTeXN0ZW0uQ29uZmlndXJhdGlvbgBTeXN0ZW0uR2xvYmFs
aXphdGlvbgBTeXN0ZW0uUmVmbGVjdGlvbgBDdWx0dXJlSW5mbwBnZXRfUmVzb3VyY2VNYW5hZ2Vy
AC5jdG9yAC5jY3RvcgBTeXN0ZW0uRGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJT
ZXJ2aWNlcwBTeXN0ZW0uUmVzb3VyY2VzAFNUXzU3Y2U1ZWE4MWFjZDQ4Mjk4MjlmZDIwYWM4OGQx
OWRkLmNzcHJvai5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJjZXMARGVidWdnaW5nTW9kZXMA
U1RfNTdjZTVlYTgxYWNkNDgyOTgyOWZkMjBhYzg4ZDE5ZGQuY3Nwcm9qLlByb3BlcnRpZXMAZ2V0
X1ZhcmlhYmxlcwBTZXR0aW5ncwBTeXN0ZW0uV2luZG93cy5Gb3JtcwBTdWNjZXNzAGdldF9EdHMA
U2NyaXB0UmVzdWx0cwBDb25jYXQAT2JqZWN0AGdldF9EZWZhdWx0AERpYWxvZ1Jlc3VsdABzZXRf
VGFza1Jlc3VsdABTaG93AE1lc3NhZ2VCb3gAZ2V0X0Fzc2VtYmx5AAAAAAAjVQBzAGUAcgA6ADoA
YwB1AHIAcgBlAG4AdABkAGEAdABlAAAZYwB1AHIAcgBlAG4AdABkAGEAdABlADoAAC9VAHMAZQBy
ADoAOgBMAGEAcwB0AEkAbgBmAGwAYQB0AGkAbwBuAEQAYQB0AGUAACNMAGEAcwB0AEkAbgBmAGwA
YQB0AGkAbwBuAEQAYQB0AGUAAB9VAHMAZQByADoAOgBJAG4AZgBsAGEAdABpAG8AbgAAE0kAbgBm
AGwAYQB0AGkAbwBuAAAnVQBzAGUAcgA6ADoATgBlAHgAdABNAG8AbgB0AGgARABhAHQAZQAAf1MA
VABfADUANwBjAGUANQBlAGEAOAAxAGEAYwBkADQAOAAyADkAOAAyADkAZgBkADIAMABhAGMAOAA4
AGQAMQA5AGQAZAAuAGMAcwBwAHIAbwBqAC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8A
dQByAGMAZQBzAAAAuPBWkACrrEOQE7iRZdIKwQAEIAEBCAMgAAEFIAEBEREEIAEBDgUgAQERUQMH
AQ4EIAASYQQgABJlBSABEmkcAyAAHAMgAA4FAAIODg4FAAERdQ4GAAESeRF9BSAAEoCBByACAQ4S
gIEIt3pcVhk04IkIiYRdzYCAzJEEAAAAAAQBAAAAAwYSSQMGEk0DBhIQAgYIAwYRFAQAABJJBAAA
Ek0FAAEBEk0EAAASEAMAAAEECAASSQQIABJNBAgAEhAIAQAIAAAAAAAeAQABAFQCFldyYXBOb25F
eGNlcHRpb25UaHJvd3MBCAEAAgAAAAAALwEAKlNUXzU3Y2U1ZWE4MWFjZDQ4Mjk4MjlmZDIwYWM4
OGQxOWRkLmNzcHJvagAABQEAAAAAFgEAEUNvcHlyaWdodCBAICAyMDE5AABJAQAaLk5FVEZyYW1l
d29yayxWZXJzaW9uPXY0LjcBAFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lEi5ORVQgRnJhbWV3b3Jr
IDQuNwC0AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1z
Y29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49
Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAA
AAAAAAAAAFBBRFBBRFC0AAAAmC8AAAAAAAAAAAAAsi8AAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AKQvAAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAABABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAA
AABIAAAAWEAAADoEAAAAAAAAAAAAADoENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBP
AAAAAAC9BO/+AAABAAAAAQBDqAcdAAABAEOoBx0/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAA
RAAAAAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBv
AG4AAAAAAAAAsASaAwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAAB2AwAAAQAwADAA
MAAwADAANABiADAAAAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABh
AG4AeQBOAGEAbQBlAAAAAAAAAAAAfgArAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4A
AAAAAFMAVABfADUANwBjAGUANQBlAGEAOAAxAGEAYwBkADQAOAAyADkAOAAyADkAZgBkADIAMABh
AGMAOAA4AGQAMQA5AGQAZAAuAGMAcwBwAHIAbwBqAAAAAAA+AA8AAQBGAGkAbABlAFYAZQByAHMA
aQBvAG4AAAAAADEALgAwAC4ANwA0ADMAMQAuADQAMwAwADcANQAAAAAAcAAoAAEASQBuAHQAZQBy
AG4AYQBsAE4AYQBtAGUAAABzAHQAXwBkAGQANgA5ADcAYgBkADAAMQBlAGIAOAA0ADkAMQBiAGEA
NQBjADEANwBkAGEANQAyAGEANgBkADAAMABhADEALgBkAGwAbAAAAEgAEgABAEwAZQBnAGEAbABD
AG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcAaAB0ACAAQAAgACAAMgAwADEAOQAAACoA
AQABAEwAZQBnAGEAbABUAHIAYQBkAGUAbQBhAHIAawBzAAAAAAAAAAAAeAAoAAEATwByAGkAZwBp
AG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAHMAdABfAGQAZAA2ADkANwBiAGQAMAAxAGUAYgA4ADQA
OQAxAGIAYQA1AGMAMQA3AGQAYQA1ADIAYQA2AGQAMAAwAGEAMQAuAGQAbABsAAAAdgArAAEAUABy
AG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAFQAXwA1ADcAYwBlADUAZQBhADgAMQBhAGMAZAA0ADgA
MgA5ADgAMgA5AGYAZAAyADAAYQBjADgAOABkADEAOQBkAGQALgBjAHMAcAByAG8AagAAAAAAQgAP
AAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA3ADQAMwAxAC4ANAAzADAA
NwA1AAAAAABGAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA3
ADQAMwAxAC4ANAAzADAANwA1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAwAAADEPwAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Sequence Container 1"
      DTS:CreationName="STOCK:SEQUENCE"
      DTS:Description="Sequence Container"
      DTS:Disabled="True"
      DTS:DTSID="{0BFC9E82-AA90-4159-8925-1B69D8E1965A}"
      DTS:ExecutableType="STOCK:SEQUENCE"
      DTS:LocaleID="-1"
      DTS:ObjectName="Sequence Container 1">
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Sequence Container 1\Execute SQL Task"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{41BFADB6-1BCF-4762-806A-435388B5EC5E}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Execute SQL Task"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="2">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{20FA0BA0-2682-41ED-9089-A6E3B7C4C522}"
              SQLTask:SqlStatementSource="Select distinct Dateadd(mm,1,'2020-03-01 00:00:00')"
              SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ResultBinding
                SQLTask:ResultName="0"
                SQLTask:DtsVariableName="User::nextmonth" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container 1\Variables"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{CD9D2F0A-B2E0-428C-A925-CDA4F48D848A}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Variables"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="2">
          <DTS:Variables>
            <DTS:Variable
              DTS:CreationName=""
              DTS:DTSID="{848198D2-F8FE-4B95-AA8D-15A416963D57}"
              DTS:IncludeInDebugDump="6789"
              DTS:Namespace="User"
              DTS:ObjectName="currentdate">
              <DTS:VariableValue
                DTS:DataType="7">3/24/2020 1:19:04 PM</DTS:VariableValue>
            </DTS:Variable>
          </DTS:Variables>
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{20FA0BA0-2682-41ED-9089-A6E3B7C4C522}"
              SQLTask:BypassPrepare="False"
              SQLTask:SqlStatementSource="Select MAX(dtDate) as LastInflationDate,&#xA;GETDATE() AS Currentdate,&#xA;InflationValue From STA_Inflation where dtDate=(select MAX(dtDate) as Inflation  from dbo.STA_Inflation)&#xA;GROUP BY  InflationValue "
              SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ResultBinding
                SQLTask:ResultName="0"
                SQLTask:DtsVariableName="User::LastInflationDate" />
              <SQLTask:ResultBinding
                SQLTask:ResultName="1"
                SQLTask:DtsVariableName="User::currentdate" />
              <SQLTask:ResultBinding
                SQLTask:ResultName="2"
                SQLTask:DtsVariableName="User::Inflation" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Sequence Container 1.PrecedenceConstraints[Constraint]"
          DTS:CreationName=""
          DTS:DTSID="{C9371B42-415D-4235-AE56-207308F196BB}"
          DTS:From="Package\Sequence Container 1\Variables"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint"
          DTS:To="Package\Sequence Container 1\Execute SQL Task" />
      </DTS:PrecedenceConstraints>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Sequence Container 2"
      DTS:CreationName="STOCK:SEQUENCE"
      DTS:Description="Sequence Container"
      DTS:Disabled="True"
      DTS:DTSID="{36046A43-2DBF-4E38-9070-B1EAC94527B4}"
      DTS:ExecutableType="STOCK:SEQUENCE"
      DTS:LocaleID="-1"
      DTS:ObjectName="Sequence Container 2">
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Sequence Container 2\Execute SQL Task"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{DE81968A-44F3-4BAC-8735-CA61C4E2A3F4}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Execute SQL Task"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="3">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{20FA0BA0-2682-41ED-9089-A6E3B7C4C522}"
              SQLTask:SqlStmtSourceType="Variable"
              SQLTask:SqlStatementSource="User::NextMonth"
              SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ResultBinding
                SQLTask:ResultName="0"
                SQLTask:DtsVariableName="User::NextMonthDate" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container 2\Script Task 1"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:Description="Script Task"
          DTS:DTSID="{B7DA4211-17D3-48EE-8E8A-FA3D8DC6C08A}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Script Task 1"
          DTS:ThreadHint="3">
          <DTS:Variables />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_7dd43119be91495ab3c0320221cb4f2f"
              VSTAMajorVersion="15"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadOnlyVariables="User::currentdate,User::Inflation,User::LastInflationDate,User::nextmonth">
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="st_7dd43119be91495ab3c0320221cb4f2f.csproj"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="utf-16"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This section defines project-level properties.

       Configuration - Specifies whether the default configuration is Release or Debug.
       Platform - Specifies what CPU the output of this project can run on.
       OutputType - Must be "Library" for VSTA.
       NoStandardLibraries - Set to "false" for VSTA.
       RootNamespace - In C#, this specifies the namespace given to new files.
                       In Visual Basic, all objects are wrapped in this namespace at runtime.
       AssemblyName - Name of the output assembly.
  -->
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <OutputType>Library</OutputType>
    <NoStandardLibraries>false</NoStandardLibraries>
    <RootNamespace>ST_57ce5ea81acd4829829fd20ac88d19dd.csproj</RootNamespace>
    <AssemblyName>st_7dd43119be91495ab3c0320221cb4f2f</AssemblyName>
    <ProjectGuid>{10D51804-D994-4D57-8AA6-A40D93732E36}</ProjectGuid>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Debug" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Release" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section enables pre- and post-build steps. However,
       it is recommended that MSBuild tasks be used instead of these properties.
  -->
  <PropertyGroup>
    <PreBuildEvent></PreBuildEvent>
    <PostBuildEvent></PostBuildEvent>
  </PropertyGroup>
  <!-- This sections specifies references for the project. -->
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=15.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=15.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <!-- This section defines the user source files that are part of the
       project.

       Compile - Specifies a source file to compile.
       EmbeddedResource - Specifies a .resx file for embedded resources.
       None - Specifies a file that is not to be passed to the compiler (for instance,
              a text file or XML file).
       AppDesigner - Specifies the directory where the application properties files can
                     be found.
  -->
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
    <!-- Include the default configuration information and metadata files for the add-in.
         These files are copied to the build output directory when the project is
         built, and the path to the configuration file is passed to add-in on the command
         line when debugging.
    -->
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="" />
        <Host Name="SSIS_ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST150</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[/*
   Microsoft SQL Server Integration Services Script Task
   Write scripts using Microsoft Visual C# 2008.
   The ScriptMain is the entry point class of the script.
*/

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;

namespace ST_57ce5ea81acd4829829fd20ac88d19dd.csproj
{
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {

        #region VSTA generated code
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        /*
		The execution engine calls this method when the task executes.
		To access the object model, use the Dts property. Connections, variables, events,
		and logging features are available as members of the Dts property as shown in the following examples.

		To reference a variable, call Dts.Variables["MyCaseSensitiveVariableName"].Value;
		To post a log entry, call Dts.Log("This is my log text", 999, null);
		To fire an event, call Dts.Events.FireInformation(99, "test", "hit the help message", "", 0, true);

		To use the connections collection use something like the following:
		ConnectionManager cm = Dts.Connections.Add("OLEDB");
		cm.ConnectionString = "Data Source=localhost;Initial Catalog=AdventureWorks;Provider=SQLNCLI10;Integrated Security=SSPI;Auto Translate=False;";

		Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
		
		To open Help, press F1.
	*/

        public void Main()
        {
            // TODO: Add your code here
             string strMessage = Dts.Variables["User::currentdate"].Value.ToString();
            MessageBox.Show("currentdate:"+strMessage);
            strMessage = Dts.Variables["User::LastInflationDate"].Value.ToString();
            MessageBox.Show("LastInflationDate" + strMessage);
            strMessage = Dts.Variables["User::Inflation"].Value.ToString();
            MessageBox.Show("Inflation"+strMessage);
            strMessage = Dts.Variables["User::NextMonthDate"].Value.ToString();
            MessageBox.Show("NextMonthDate" + strMessage);
            Dts.TaskResult = (int)ScriptResults.Success;
        }
    }
}


  ]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>st_7dd43119be91495ab3c0320221cb4f2f</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>st_7dd43119be91495ab3c0320221cb4f2f</msb:DisplayName>
    <msb:ProjectId>{037F943B-FF3F-4EAB-8AB2-1155E0F6971E}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="st_7dd43119be91495ab3c0320221cb4f2f.csproj" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_57ce5ea81acd4829829fd20ac88d19dd.csproj.Properties.Settings.get_Default():ST_57ce5ea81acd4829829fd20ac88d19dd.csproj.Properties.Sett" +
    "ings")]

namespace ST_57ce5ea81acd4829829fd20ac88d19dd.csproj.Properties
{


    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_57ce5ea81acd4829829fd20ac88d19dd.csproj")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_57ce5ea81acd4829829fd20ac88d19dd.csproj")]
[assembly: AssemblyCopyright("Copyright @  2019")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_57ce5ea81acd4829829fd20ac88d19dd.csproj.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_57ce5ea81acd4829829fd20ac88d19dd.csproj.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_57ce5ea81acd4829829fd20ac88d19dd.csproj.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_57ce5ea81acd4829829fd20ac88d19dd.csproj.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_57ce5ea81acd4829829fd20ac88d19dd.csproj.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="st_7dd43119be91495ab3c0320221cb4f2f.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAHwys14AAAAAAAAAAOAAIiALATAAABAAAAAIAAAAAAAA3i8A
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAIwvAABPAAAAAEAAAJgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAA5A8AAAAgAAAAEAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAJgEAAAAQAAAAAYAAAASAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAGAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAADA
LwAAAAAAAEgAAAACAAUAlCEAAEANAAABAAAAAAAAANQuAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABMwAgDRAAAAAQAAEQIoEAAACm8RAAAKcgEAAHBvEgAACm8T
AAAKbxQAAAoKciUAAHAGKBUAAAooFgAACiYCKBAAAApvEQAACnI/AABwbxIAAApvEwAACm8UAAAK
CnJvAABwBigVAAAKKBYAAAomAigQAAAKbxEAAApykwAAcG8SAAAKbxMAAApvFAAACgpyswAAcAYo
FQAACigWAAAKJgIoEAAACm8RAAAKcscAAHBvEgAACm8TAAAKbxQAAAoKcu8AAHAGKBUAAAooFgAA
CiYCKBAAAAoWbxcAAAoqHgIoGAAACioeAigZAAAKKq5+AQAABC0ecgsBAHDQAwAAAigaAAAKbxsA
AApzHAAACoABAAAEfgEAAAQqGn4CAAAEKh4CgAIAAAQqGn4DAAAEKh4CKB0AAAoqLnMIAAAGgAMA
AAQqAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAAAPADAAAjfgAAXAQAANAFAAAj
U3RyaW5ncwAAAAAsCgAAjAEAACNVUwC4CwAAEAAAACNHVUlEAAAAyAsAAHgBAAAjQmxvYgAAAAAA
AAACAAABVx2iAQkDAAAA+gEzABYAAAEAAAAgAAAABQAAAAYAAAAJAAAAAQAAAB0AAAACAAAAEAAA
AAEAAAACAAAAAwAAAAQAAAABAAAABQAAAAEAAAABAAAAAACgAwEAAAAAAAYAAQJwBAYAkAJwBAYA
TQFdBA8A6wQAAAYAegEeBAYA5AEeBAYAxQEeBAYAdwIeBAYAIQIeBAYAOgIeBAYAkQEeBAYArAHi
AgoAVQJPAwoAzABPAwYA2APRAwYAMAFdBAYAgQXRAwYAQASQBAYAMAQJBA4AAAGKAw4AYQGKAw4A
6AD0AwYAFQFwBAoAeANPAxIANAV3ABIASgB3AAYA/gLRAxYAtQVHBRYAlAVHBQYAlwDRAwYAUwDR
AwYAxAUeBAAAAAABAAAAAAABAAEAAQAQAOkDBQM5AAEAAQAAABAAlwT6BEUAAQADAAABEAA+BfoE
WQADAAcAAwEAAGwFAAA9AAQACgARAN0DdAARALwAeAARADoAfAAGBikAgABWgFwFgwBWgJwAgwBQ
IAAAAACGAO8DBgABAC0hAAAAAIYYUAQGAAEANSEAAAAAgxhQBAYAAQA9IQAAAACTCDwEhwABAGkh
AAAAAJMIpACMAAEAcCEAAAAAkwiwAJEAAQB4IQAAAACWCIgFlwACAH8hAAAAAIYYUAQGAAIAhyEA
AAAAkRhWBJwAAgAAAAEAuAIJAFAEAQARAFAEBgAZAFAECgApAFAEEAAxAFAEEAA5AFAEEABBAFAE
EABJAFAEEABRAFAEEABZAFAEEABhAFAEEABpAFAEBgCBAFAEBgCpAFAEFQC5AFAEBgBxAGQFHwDB
ADAFJADJAMgDKQDRAK4CLwCJAPwCMwDZAHoFNwDhALAFPQDBAKEFAQBxAFAEBgCJAFAEBgDxAGUA
QwDxAMAFSgCRAFAEUACxAFAEBgAIABQAagAIABgAbwApAHMA1wAuAAsArwAuABMAuAAuABsA1wAu
ACMA4AAuACsAEAEuADMAEAEuADsAEAEuAEMA4AAuAEsAFgEuAFMAEAEuAFsALQFDAGMAbwBJAHMA
1wBhAHsAbwBjAGsAbwAbAAMAAQAEAAMAAABABKAAAADEAKUAAACMBaoAAgAEAAMAAgAFAAUAAQAG
AAUAAgAHAAcABIAAAAEAAAAHHU6oAAAAAAAAvgIAAAQAAAAAAAAAAAAAAFgAMQAAAAAADwAAAAAA
AAAAAAAAYQAwAwAAAAAEAAAAAAAAAAAAAABYANEDAAAAAA8AAAAAAAAAAAAAAGEACgAAAAAABAAA
AAAAAAAAAAAAWABHBQAAAAAAAAAAAQAAAKEEAAAFAAIAAAAAAAA8TW9kdWxlPgBNaWNyb3NvZnQu
U3FsU2VydmVyLk1hbmFnZWREVFMAdmFsdWVfXwBtc2NvcmxpYgBkZWZhdWx0SW5zdGFuY2UAVmFy
aWFibGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUATWljcm9zb2Z0LlNxbFNl
cnZlci5EdHMuUnVudGltZQBUeXBlAEZhaWx1cmUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAcmVz
b3VyY2VDdWx0dXJlAFZTVEFSVFNjcmlwdE9iamVjdE1vZGVsQmFzZQBBcHBsaWNhdGlvblNldHRp
bmdzQmFzZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBE
ZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9yQnJv
d3NhYmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtB
dHRyaWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0
dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlv
bnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0
cmlidXRlAFNTSVNTY3JpcHRUYXNrRW50cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlB
dHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAZ2V0X1ZhbHVlAHZhbHVlAHN0
XzdkZDQzMTE5YmU5MTQ5NWFiM2MwMzIwMjIxY2I0ZjJmAFN5c3RlbS5SdW50aW1lLlZlcnNpb25p
bmcAVG9TdHJpbmcAU1RfNTdjZTVlYTgxYWNkNDgyOTgyOWZkMjBhYzg4ZDE5ZGQuY3Nwcm9qAE1p
Y3Jvc29mdC5TcWxTZXJ2ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNr
cy5TY3JpcHRUYXNrAFNjcmlwdE9iamVjdE1vZGVsAFN5c3RlbS5Db21wb25lbnRNb2RlbABzdF83
ZGQ0MzExOWJlOTE0OTVhYjNjMDMyMDIyMWNiNGYyZi5kbGwAZ2V0X0l0ZW0AU3lzdGVtAEVudW0A
cmVzb3VyY2VNYW4AU2NyaXB0TWFpbgBTeXN0ZW0uQ29uZmlndXJhdGlvbgBTeXN0ZW0uR2xvYmFs
aXphdGlvbgBTeXN0ZW0uUmVmbGVjdGlvbgBDdWx0dXJlSW5mbwBnZXRfUmVzb3VyY2VNYW5hZ2Vy
AC5jdG9yAC5jY3RvcgBTeXN0ZW0uRGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJT
ZXJ2aWNlcwBTeXN0ZW0uUmVzb3VyY2VzAFNUXzU3Y2U1ZWE4MWFjZDQ4Mjk4MjlmZDIwYWM4OGQx
OWRkLmNzcHJvai5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJjZXMARGVidWdnaW5nTW9kZXMA
U1RfNTdjZTVlYTgxYWNkNDgyOTgyOWZkMjBhYzg4ZDE5ZGQuY3Nwcm9qLlByb3BlcnRpZXMAZ2V0
X1ZhcmlhYmxlcwBTZXR0aW5ncwBTeXN0ZW0uV2luZG93cy5Gb3JtcwBTdWNjZXNzAGdldF9EdHMA
U2NyaXB0UmVzdWx0cwBDb25jYXQAT2JqZWN0AGdldF9EZWZhdWx0AERpYWxvZ1Jlc3VsdABzZXRf
VGFza1Jlc3VsdABTaG93AE1lc3NhZ2VCb3gAZ2V0X0Fzc2VtYmx5AAAAAAAjVQBzAGUAcgA6ADoA
YwB1AHIAcgBlAG4AdABkAGEAdABlAAAZYwB1AHIAcgBlAG4AdABkAGEAdABlADoAAC9VAHMAZQBy
ADoAOgBMAGEAcwB0AEkAbgBmAGwAYQB0AGkAbwBuAEQAYQB0AGUAACNMAGEAcwB0AEkAbgBmAGwA
YQB0AGkAbwBuAEQAYQB0AGUAAB9VAHMAZQByADoAOgBJAG4AZgBsAGEAdABpAG8AbgAAE0kAbgBm
AGwAYQB0AGkAbwBuAAAnVQBzAGUAcgA6ADoATgBlAHgAdABNAG8AbgB0AGgARABhAHQAZQAAG04A
ZQB4AHQATQBvAG4AdABoAEQAYQB0AGUAAH9TAFQAXwA1ADcAYwBlADUAZQBhADgAMQBhAGMAZAA0
ADgAMgA5ADgAMgA5AGYAZAAyADAAYQBjADgAOABkADEAOQBkAGQALgBjAHMAcAByAG8AagAuAFAA
cgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAAAA/9MBVfycxOuQJCBRzEUa8A
BCABAQgDIAABBSABARERBCABAQ4FIAEBEVEDBwEOBCAAEmEEIAASZQUgARJpHAMgABwDIAAOBQAC
Dg4OBQABEXUOBgABEnkRfQUgABKAgQcgAgEOEoCBCLd6XFYZNOCJCImEXc2AgMyRBAAAAAAEAQAA
AAMGEkkDBhJNAwYSEAIGCAMGERQEAAASSQQAABJNBQABARJNBAAAEhADAAABBAgAEkkECAASTQQI
ABIQCAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dzAQgBAAIAAAAAAC8BACpT
VF81N2NlNWVhODFhY2Q0ODI5ODI5ZmQyMGFjODhkMTlkZC5jc3Byb2oAAAUBAAAAABYBABFDb3B5
cmlnaHQgQCAgMjAxOQAASQEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC43AQBUDhRGcmFtZXdv
cmtEaXNwbGF5TmFtZRIuTkVUIEZyYW1ld29yayA0LjcAtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0u
UmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0
dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291
cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAALQvAAAAAAAAAAAA
AM4vAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAADALwAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1z
Y29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAABABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAA
AABIAAAAWEAAADoEAAAAAAAAAAAAADoENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBP
AAAAAAC9BO/+AAABAAAAAQBOqAcdAAABAE6oBx0/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAA
RAAAAAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBv
AG4AAAAAAAAAsASaAwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAAB2AwAAAQAwADAA
MAAwADAANABiADAAAAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABh
AG4AeQBOAGEAbQBlAAAAAAAAAAAAfgArAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4A
AAAAAFMAVABfADUANwBjAGUANQBlAGEAOAAxAGEAYwBkADQAOAAyADkAOAAyADkAZgBkADIAMABh
AGMAOAA4AGQAMQA5AGQAZAAuAGMAcwBwAHIAbwBqAAAAAAA+AA8AAQBGAGkAbABlAFYAZQByAHMA
aQBvAG4AAAAAADEALgAwAC4ANwA0ADMAMQAuADQAMwAwADgANgAAAAAAcAAoAAEASQBuAHQAZQBy
AG4AYQBsAE4AYQBtAGUAAABzAHQAXwA3AGQAZAA0ADMAMQAxADkAYgBlADkAMQA0ADkANQBhAGIA
MwBjADAAMwAyADAAMgAyADEAYwBiADQAZgAyAGYALgBkAGwAbAAAAEgAEgABAEwAZQBnAGEAbABD
AG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcAaAB0ACAAQAAgACAAMgAwADEAOQAAACoA
AQABAEwAZQBnAGEAbABUAHIAYQBkAGUAbQBhAHIAawBzAAAAAAAAAAAAeAAoAAEATwByAGkAZwBp
AG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAHMAdABfADcAZABkADQAMwAxADEAOQBiAGUAOQAxADQA
OQA1AGEAYgAzAGMAMAAzADIAMAAyADIAMQBjAGIANABmADIAZgAuAGQAbABsAAAAdgArAAEAUABy
AG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAFQAXwA1ADcAYwBlADUAZQBhADgAMQBhAGMAZAA0ADgA
MgA5ADgAMgA5AGYAZAAyADAAYQBjADgAOABkADEAOQBkAGQALgBjAHMAcAByAG8AagAAAAAAQgAP
AAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA3ADQAMwAxAC4ANAAzADAA
OAA2AAAAAABGAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA3
ADQAMwAxAC4ANAAzADAAOAA2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAwAAADgPwAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container 2\Variables"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{6256B71F-8A04-4B1C-BF0C-581F29978304}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Variables"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="3">
          <DTS:Variables>
            <DTS:Variable
              DTS:CreationName=""
              DTS:DTSID="{77DEBCC4-5AEB-49F8-BEF4-918C53AAEF23}"
              DTS:IncludeInDebugDump="6789"
              DTS:Namespace="User"
              DTS:ObjectName="currentdate">
              <DTS:VariableValue
                DTS:DataType="7">3/24/2020 1:19:04 PM</DTS:VariableValue>
            </DTS:Variable>
          </DTS:Variables>
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{20FA0BA0-2682-41ED-9089-A6E3B7C4C522}"
              SQLTask:BypassPrepare="False"
              SQLTask:SqlStatementSource="Select MAX(dtDate) as LastInflationDate,&#xA;GETDATE() AS Currentdate,&#xA;InflationValue From STA_Inflation where dtDate=(select MAX(dtDate) as Inflation  from dbo.STA_Inflation)&#xA;GROUP BY  InflationValue "
              SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ResultBinding
                SQLTask:ResultName="0"
                SQLTask:DtsVariableName="User::LastInflationDate" />
              <SQLTask:ResultBinding
                SQLTask:ResultName="1"
                SQLTask:DtsVariableName="User::currentdate" />
              <SQLTask:ResultBinding
                SQLTask:ResultName="2"
                SQLTask:DtsVariableName="User::Inflation" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Sequence Container 2.PrecedenceConstraints[Constraint]"
          DTS:CreationName=""
          DTS:DTSID="{9707C562-A0B9-4721-BAC4-87654367043C}"
          DTS:From="Package\Sequence Container 2\Variables"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint"
          DTS:To="Package\Sequence Container 2\Execute SQL Task" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Sequence Container 2.PrecedenceConstraints[Constraint 1]"
          DTS:CreationName=""
          DTS:DTSID="{C1A0CB36-AC33-4A09-BCF7-2593C06EFD84}"
          DTS:From="Package\Sequence Container 2\Execute SQL Task"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 1"
          DTS:To="Package\Sequence Container 2\Script Task 1" />
      </DTS:PrecedenceConstraints>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{22D62BFC-D1FC-4761-AC02-4357CD411080}"
      DTS:From="Package\Currentdate Variables"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\Data Flow Task" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 1]"
      DTS:CreationName=""
      DTS:DTSID="{1D4BB261-2BBE-49AC-A670-C49C27EDC6B8}"
      DTS:From="Package\For Loop Container"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 1"
      DTS:To="Package\Script Task 1" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 2]"
      DTS:CreationName=""
      DTS:DTSID="{96FD06B8-2D6D-44E9-AFBE-A46FC02A8843}"
      DTS:From="Package\LastInflationDate Variables"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 2"
      DTS:To="Package\Data Flow Task" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 3]"
      DTS:CreationName=""
      DTS:DTSID="{CAE9B739-6212-4FCD-8B19-797250E9C2D4}"
      DTS:From="Package\InflationValue Variables"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 3"
      DTS:To="Package\Data Flow Task" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="32" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="136,44"
          Id="Package\Currentdate Variables"
          TopLeft="493.688679245283,5.5" />
        <NodeLayout
          Size="136,44"
          Id="Package\Data Flow Task"
          TopLeft="494.896226415094,102.405660377358" />
        <NodeLayout
          Size="136,44"
          Id="Package\Data Flow Task 1"
          TopLeft="501.915094339623,223.349056603774" />
        <NodeLayout
          Size="136,44"
          Id="Package\Execute SQL Task"
          TopLeft="83.5754716981132,98.4056603773585" />
        <NodeLayout
          Size="136,44"
          Id="Package\For Loop Container\Execute SQL Task"
          TopLeft="65.8867924528302,29.9056603773585" />
        <ContainerLayout
          HeaderHeight="43.924528301886795"
          IsExpanded="True"
          PanelSize="267,103"
          Size="267,147"
          Id="Package\For Loop Container"
          TopLeft="5.5,190.330188679245" />
        <NodeLayout
          Size="136,44"
          Id="Package\InflationValue Variables"
          TopLeft="647.462264150943,8.33018867924528" />
        <NodeLayout
          Size="136,44"
          Id="Package\LastInflationDate Variables"
          TopLeft="321.009433962264,6.33018867924528" />
        <NodeLayout
          Size="136,44"
          Id="Package\Script Task 1"
          TopLeft="43.3867924528302,400.933962264151" />
        <NodeLayout
          Size="136,44"
          Id="Package\Sequence Container 1\Execute SQL Task"
          TopLeft="69.8867924528302,147.377358490566" />
        <NodeLayout
          Size="136,44"
          Id="Package\Sequence Container 1\Variables"
          TopLeft="50.8301886792453,8.47169811320754" />
        <EdgeLayout
          Id="Package\Sequence Container 1.PrecedenceConstraints[Constraint]"
          TopLeft="118.716981132075,52.3962264150943">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="19.0566037735849,94.9811320754717"
              Start="0,0"
              End="19.0566037735849,87.4811320754717">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,47.4716981132076" />
                  <mssgle:LineSegment
                    End="19.0566037735849,47.4716981132076" />
                  <mssgle:LineSegment
                    End="19.0566037735849,87.4811320754717" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43.924528301886795"
          IsExpanded="True"
          PanelSize="221,228"
          Size="221,272"
          Id="Package\Sequence Container 1"
          TopLeft="947.084905660377,11.311320754717" />
        <NodeLayout
          Size="136,44"
          Id="Package\Sequence Container 2\Execute SQL Task"
          TopLeft="48,147.377358490566" />
        <NodeLayout
          Size="136,44"
          Id="Package\Sequence Container 2\Script Task 1"
          TopLeft="17.9622641509434,264.094339622641" />
        <NodeLayout
          Size="136,44"
          Id="Package\Sequence Container 2\Variables"
          TopLeft="28.9433962264151,8.47169811320759" />
        <EdgeLayout
          Id="Package\Sequence Container 2.PrecedenceConstraints[Constraint]"
          TopLeft="96.8301886792453,52.3962264150944">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="19.0566037735848,94.9811320754717"
              Start="0,0"
              End="19.0566037735848,87.4811320754717">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,47.4716981132075" />
                  <mssgle:LineSegment
                    End="19.0566037735848,47.4716981132075" />
                  <mssgle:LineSegment
                    End="19.0566037735848,87.4811320754717" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container 2.PrecedenceConstraints[Constraint 1]"
          TopLeft="115.88679245283,191.301886792453">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-30.0377358490565,72.7924528301886"
              Start="0,0"
              End="-30.0377358490565,65.2924528301886">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,36.3773584905661" />
                  <mssgle:LineSegment
                    End="-30.0377358490565,36.3773584905661" />
                  <mssgle:LineSegment
                    End="-30.0377358490565,65.2924528301886" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43.924528301886795"
          IsExpanded="True"
          PanelSize="199,322"
          Size="199,366"
          Id="Package\Sequence Container 2"
          TopLeft="975.38679245283,339.27358490566" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="561.575471698113,49.4245283018868">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="1.20754716981133,52.9811320754717"
              Start="0,0"
              End="1.20754716981133,45.4811320754717">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26.4905660377358" />
                  <mssgle:LineSegment
                    End="1.20754716981133,26.4905660377358" />
                  <mssgle:LineSegment
                    End="1.20754716981133,45.4811320754717" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="139.009433962264,337.61320754717">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-27.7358490566038,63.3207547169811"
              Start="0,0"
              End="-27.7358490566038,55.8207547169811">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,31.6603773584906" />
                  <mssgle:LineSegment
                    End="-27.7358490566038,31.6603773584906" />
                  <mssgle:LineSegment
                    End="-27.7358490566038,55.8207547169811" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 2]"
          TopLeft="388.896226415094,50.2547169811321">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="153.132075471698,52.1509433962264"
              Start="0,0"
              End="153.132075471698,44.6509433962264">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26.0754716981132" />
                  <mssgle:LineSegment
                    End="153.132075471698,26.0754716981132" />
                  <mssgle:LineSegment
                    End="153.132075471698,44.6509433962264" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 3]"
          TopLeft="715.349056603774,52.2547169811321">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-111.056603773585,50.1509433962264"
              Start="0,0"
              End="-111.056603773585,42.6509433962264">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,25.0943396226415" />
                  <mssgle:LineSegment
                    End="-111.056603773585,25.0943396226415" />
                  <mssgle:LineSegment
                    End="-111.056603773585,42.6509433962264" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <TaskHost
    design-time-name="Package\Data Flow Task 1">
    <LayoutInfo>
      <GraphLayout
        Capacity="32" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="295,44"
          Id="Package\Data Flow Task 1\Check Last Inflation Record InflationValue and if is before current month then Add it Else Ignore"
          TopLeft="6.48113207547169,5.5" />
        <NodeLayout
          Size="136,44"
          Id="Package\Data Flow Task 1\Multicast 1"
          TopLeft="307.990566037736,863.72641509434" />
        <NodeLayout
          Size="136,44"
          Id="Package\Data Flow Task 1\Add 1 month to lastInflationDate"
          TopLeft="305.047169811321,92.2924528301887" />
        <NodeLayout
          Size="238,44"
          Id="Package\Data Flow Task 1\All Records that where before the Last one-Change the Inflation to Null"
          TopLeft="413.877358490566,511.688679245283" />
        <NodeLayout
          Size="136,44"
          Id="Package\Data Flow Task 1\Conditional Split"
          TopLeft="5.5,114.330188679245" />
        <NodeLayout
          Size="136,44"
          Id="Package\Data Flow Task 1\Union All"
          TopLeft="150.254716981132,324.971698113208" />
        <EdgeLayout
          Id="Package\Data Flow Task 1.Paths[OLE DB Source Output]"
          TopLeft="153.72641509434,49.4245283018868">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-80.3396226415094,64.9056603773585"
              Start="0,0"
              End="-80.3396226415094,57.4056603773585">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,32.4528301886793" />
                  <mssgle:LineSegment
                    End="-80.3396226415094,32.4528301886793" />
                  <mssgle:LineSegment
                    End="-80.3396226415094,57.4056603773585" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Data Flow Task 1.Paths[MONTH(LastInflationDate) Equal to MONTH(CURRENTDATE)]"
          TopLeft="94.1415094339623,158.254716981132">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="124,166.716981132075"
              Start="0,0"
              End="124,159.216981132075">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,83.3584905660377" />
                  <mssgle:LineSegment
                    End="124,83.3584905660377" />
                  <mssgle:LineSegment
                    End="124,159.216981132075" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-72.62173828125,88.3584905660377,269.2434765625,11.658203125"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Data Flow Task 1.Paths[Month of LastInflationdate&lt;&gt; month of currentDate]"
          TopLeft="141.27358490566,136.292452830189">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="163.77358490566,-22.0377358490566"
              Start="0,0"
              End="156.27358490566,-22.0377358490566">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="81.8867924528302,0" />
                  <mssgle:LineSegment
                    End="81.8867924528302,-22.0377358490566" />
                  <mssgle:LineSegment
                    End="156.27358490566,-22.0377358490566" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-33.4545552034198,5,230.6826953125,9.7978515625"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Data Flow Task 1.Paths[Derived Column Output]"
          TopLeft="372.933962264151,136.216981132075">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-134.037735849057,188.754716981132"
              Start="0,0"
              End="-134.037735849057,181.254716981132">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,94.377358490566" />
                  <mssgle:LineSegment
                    End="-134.037735849057,94.377358490566" />
                  <mssgle:LineSegment
                    End="-134.037735849057,181.254716981132" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="130,42"
          Id="Package\Data Flow Task 1\Merge Join"
          TopLeft="264,602" />
        <NodeLayout
          Size="98,42"
          Id="Package\Data Flow Task 1\Sort"
          TopLeft="477,600" />
        <EdgeLayout
          Id="Package\Data Flow Task 1.Paths[OLE DB Source Output1]"
          TopLeft="529.438679245283,555.688679245283">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,44.3113207547169"
              Start="0,0"
              End="0,36.8113207547169">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,36.8113207547169" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="107,42"
          Id="Package\Data Flow Task 1\Sort 1"
          TopLeft="187,462" />
        <EdgeLayout
          Id="Package\Data Flow Task 1.Paths[Union All Output 1]"
          TopLeft="218.254716981132,368.971698113208">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="22.2452830188679,93.0283018867925"
              Start="0,0"
              End="22.2452830188679,85.5283018867925">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,42.5141509433962" />
                  <mssgle:CubicBezierSegment
                    Point1="0,42.5141509433962"
                    Point2="0,46.5141509433962"
                    Point3="4,46.5141509433962" />
                  <mssgle:LineSegment
                    End="18.2452830188679,46.5141509433962" />
                  <mssgle:CubicBezierSegment
                    Point1="18.2452830188679,46.5141509433962"
                    Point2="22.2452830188679,46.5141509433962"
                    Point3="22.2452830188679,50.5141509433962" />
                  <mssgle:LineSegment
                    End="22.2452830188679,85.5283018867925" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Data Flow Task 1.Paths[Sort Output]"
          TopLeft="240.5,504">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="88.5,98"
              Start="0,0"
              End="88.5,90.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,45" />
                  <mssgle:CubicBezierSegment
                    Point1="0,45"
                    Point2="0,49"
                    Point3="4,49" />
                  <mssgle:LineSegment
                    End="84.5,49" />
                  <mssgle:CubicBezierSegment
                    Point1="84.5,49"
                    Point2="88.5,49"
                    Point3="88.5,53" />
                  <mssgle:LineSegment
                    End="88.5,90.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Data Flow Task 1.Paths[Sort Output1]"
          TopLeft="477,622">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-83,0"
              Start="0,0"
              End="-75.5,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="-75.5,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="120,42"
          Id="Package\Data Flow Task 1\Multicast"
          TopLeft="286,693" />
        <EdgeLayout
          Id="Package\Data Flow Task 1.Paths[Merge Join Output]"
          TopLeft="329,644">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="17,49"
              Start="0,0"
              End="17,41.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.5" />
                  <mssgle:CubicBezierSegment
                    Point1="0,20.5"
                    Point2="0,24.5"
                    Point3="4,24.5" />
                  <mssgle:LineSegment
                    End="13,24.5" />
                  <mssgle:CubicBezierSegment
                    Point1="13,24.5"
                    Point2="17,24.5"
                    Point3="17,28.5" />
                  <mssgle:LineSegment
                    End="17,41.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0.5,29.5,16,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>